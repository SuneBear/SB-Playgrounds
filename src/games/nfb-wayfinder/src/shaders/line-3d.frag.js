module.exports="#define GLSLIFY 1\nuniform vec3 color;\nuniform float opacity;\nuniform float time;\nuniform float totalDistance;\nuniform float dottedFill;\nuniform bool dotted;\n\nvarying vec2 vDist;\nvarying float vToken;\n\nfloat aastep(float threshold, float value) {\n  #ifdef GL_OES_standard_derivatives\n    float afwidth = length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;\n    return smoothstep(threshold-afwidth, threshold+afwidth, value);\n  #else\n    return step(threshold, value);\n  #endif  \n}\n\nvoid main() {\n  float d = vDist.y / totalDistance;\n\n  gl_FragColor = vec4(color, opacity);\n\n  if (dotted) {  \n    // float dotted = vToken > 0.5 ? 1.0 : step(0.5, fract(-time * 0.2 + vDist.y / 1.0));\n    float dotted = fract(-time * 0.2 + vDist.y / 0.5);\n    dotted = mix(dotted, 1.0, step(vDist.x, dottedFill));\n    gl_FragColor.a *= aastep(0.5, dotted);\n  }\n  // if (gl_FragColor.a < 0.5) discard;\n  // gl_FragColor = vec4(mix(vec3(1.0), vec3(1.0,0.0,0.0), vToken) * vec3(d), opacity);\n}\n";