module.exports="#define GLSLIFY 1\nuniform highp sampler2D map;\nuniform sampler2D noiseMap;\nuniform sampler2D lutMap;\nuniform sampler2D glowMap;\nuniform float fadeToBlack;\nuniform vec3 fadeToBlackColor;\nuniform vec2 resolution;\nuniform vec3 rampColor0;\nuniform vec3 rampColor1;\n\nuniform float time;\nuniform float rampStrength;\nuniform float lightColor;\n\nvarying vec2 vUv;\n\n// uniform vec3 colorGradientA;\n\n// vec3 texGlowMap(vec2 uv);\n\n// #pragma glslify: blur = require('glsl-hash-blur', sample=texGlowMap, iterations=20)\n\n// vec3 texGlowMap(vec2 uv) {\n//   return texture2D(glowMap, uv).rgb;\n// }\n\nfloat blendOverlay(float base, float blend) {\n\treturn base<0.5?(2.0*base*blend):(1.0-2.0*(1.0-base)*(1.0-blend));\n}\n\nvec3 blendOverlay(vec3 base, vec3 blend) {\n\treturn vec3(blendOverlay(base.r,blend.r),blendOverlay(base.g,blend.g),blendOverlay(base.b,blend.b));\n}\n\nvec3 blendOverlay(vec3 base, vec3 blend, float opacity) {\n\treturn (blendOverlay(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendSoftLight(float base, float blend) {\n\treturn (blend<0.5)?(2.0*base*blend+base*base*(1.0-2.0*blend)):(sqrt(base)*(2.0*blend-1.0)+2.0*base*(1.0-blend));\n}\n\nvec3 blendSoftLight(vec3 base, vec3 blend) {\n\treturn vec3(blendSoftLight(base.r,blend.r),blendSoftLight(base.g,blend.g),blendSoftLight(base.b,blend.b));\n}\n\nvec3 blendSoftLight(vec3 base, vec3 blend, float opacity) {\n\treturn (blendSoftLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\n// #define LUT_FLIP_Y\n\nhighp vec3 colorLUT(in highp vec3 textureColor, in highp sampler2D lookupTable) {\n  textureColor = clamp(textureColor, 0.0, 1.0);\n  highp float blueColor = textureColor.b * 63.0;\n\n  highp vec2 quad1;\n  quad1.y = floor(floor(blueColor) / 8.0);\n  quad1.x = floor(blueColor) - (quad1.y * 8.0);\n\n  highp vec2 quad2;\n  quad2.y = floor(ceil(blueColor) / 8.0);\n  quad2.x = ceil(blueColor) - (quad2.y * 8.0);\n\n  highp vec2 texPos1;\n  texPos1.x = (quad1.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.r);\n  texPos1.y = (quad1.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.g);\n\n  // #ifdef LUT_FLIP_Y\n  texPos1.y = 1.0-texPos1.y;\n  // #endif\n\n  highp vec2 texPos2;\n  texPos2.x = (quad2.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.r);\n  texPos2.y = (quad2.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.g);\n\n  // #ifdef LUT_FLIP_Y\n  texPos2.y = 1.0-texPos2.y;\n  // #endif\n\n  highp vec3 newColor1 = texture2D(lookupTable, texPos1).rgb;\n  highp vec3 newColor2 = texture2D(lookupTable, texPos2).rgb;\n\n  highp vec3 newColor = mix(newColor1, newColor2, fract(blueColor));\n  return newColor;\n}\n\n/**\nBasic FXAA implementation based on the code on geeks3d.com with the\nmodification that the texture2DLod stuff was removed since it's\nunsupported by WebGL.\n\n--\n\nFrom:\nhttps://github.com/mitsuhiko/webgl-meincraft\n\nCopyright (c) 2011 by Armin Ronacher.\n\nSome rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above\n      copyright notice, this list of conditions and the following\n      disclaimer in the documentation and/or other materials provided\n      with the distribution.\n\n    * The names of the contributors may not be used to endorse or\n      promote products derived from this software without specific\n      prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n#ifndef FXAA_REDUCE_MIN\n    #define FXAA_REDUCE_MIN   (1.0/ 128.0)\n#endif\n#ifndef FXAA_REDUCE_MUL\n    #define FXAA_REDUCE_MUL   (1.0 / 8.0)\n#endif\n#ifndef FXAA_SPAN_MAX\n    #define FXAA_SPAN_MAX     8.0\n#endif\n\n//optimized version for mobile, where dependent \n//texture reads can be a bottleneck\nvec4 fxaa(sampler2D tex, vec2 fragCoord, vec2 resolution,\n            vec2 v_rgbNW, vec2 v_rgbNE, \n            vec2 v_rgbSW, vec2 v_rgbSE, \n            vec2 v_rgbM) {\n    vec4 color;\n    mediump vec2 inverseVP = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n    vec3 rgbNW = texture2D(tex, v_rgbNW).xyz;\n    vec3 rgbNE = texture2D(tex, v_rgbNE).xyz;\n    vec3 rgbSW = texture2D(tex, v_rgbSW).xyz;\n    vec3 rgbSE = texture2D(tex, v_rgbSE).xyz;\n    vec4 texColor = texture2D(tex, v_rgbM);\n    vec3 rgbM  = texColor.xyz;\n    vec3 luma = vec3(0.299, 0.587, 0.114);\n    float lumaNW = dot(rgbNW, luma);\n    float lumaNE = dot(rgbNE, luma);\n    float lumaSW = dot(rgbSW, luma);\n    float lumaSE = dot(rgbSE, luma);\n    float lumaM  = dot(rgbM,  luma);\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n    \n    mediump vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n    \n    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\n                          (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\n    \n    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\n    dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\n              max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n              dir * rcpDirMin)) * inverseVP;\n    \n    vec3 rgbA = 0.5 * (\n        texture2D(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +\n        texture2D(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);\n    vec3 rgbB = rgbA * 0.5 + 0.25 * (\n        texture2D(tex, fragCoord * inverseVP + dir * -0.5).xyz +\n        texture2D(tex, fragCoord * inverseVP + dir * 0.5).xyz);\n\n    float lumaB = dot(rgbB, luma);\n    if ((lumaB < lumaMin) || (lumaB > lumaMax))\n        color = vec4(rgbA, texColor.a);\n    else\n        color = vec4(rgbB, texColor.a);\n    return color;\n}\n\n//To save 9 dependent texture reads, you can compute\n//these in the vertex shader and use the optimized\n//frag.glsl function in your frag shader. \n\n//This is best suited for mobile devices, like iOS.\n\nvoid texcoords(vec2 fragCoord, vec2 resolution,\n\t\t\tout vec2 v_rgbNW, out vec2 v_rgbNE,\n\t\t\tout vec2 v_rgbSW, out vec2 v_rgbSE,\n\t\t\tout vec2 v_rgbM) {\n\tvec2 inverseVP = 1.0 / resolution.xy;\n\tv_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\n\tv_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;\n\tv_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\n\tv_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;\n\tv_rgbM = vec2(fragCoord * inverseVP);\n}\n\nvec4 apply(sampler2D tex, vec2 fragCoord, vec2 resolution) {\n\tmediump vec2 v_rgbNW;\n\tmediump vec2 v_rgbNE;\n\tmediump vec2 v_rgbSW;\n\tmediump vec2 v_rgbSE;\n\tmediump vec2 v_rgbM;\n\n\t//compute the texture coords\n\ttexcoords(fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n\t\n\t//compute FXAA\n\treturn fxaa(tex, fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n}\n\n#define gamma 2.2\n\nvec2 rotateAround (vec2 vec, vec2 center, float angle) {\n  float c = cos( angle );\n  float s = sin( angle );\n\n  float x = vec.x - center.x;\n  float y = vec.y - center.y;\n\n  vec2 outVec;\n  outVec.x = x * c - y * s + center.x;\n  outVec.y = x * s + y * c + center.y;\n  return outVec;\n}\n\nfloat linearGradient (vec2 uv, vec2 start, vec2 end) {\n  vec2 gradientDirection = end - start;\n  float gradientLenSq = dot(gradientDirection, gradientDirection);\n  vec2 relCoords = uv - start;\n  float t = dot(relCoords, gradientDirection);\n  if (gradientLenSq != 0.0) t /= gradientLenSq;\n  return t;\n}\n\nvec4 texLinear (sampler2D image, vec2 uv) {\n  return texture2D(image, uv);\n  // return GammaToLinear(texture2D(image, uv), gamma);\n}\n\nvec4 chromatic (sampler2D image, vec2 uv, vec2 direction) {\n  vec4 col = vec4( 0.0 );\n  vec2 off = vec2( 1.3333333333333333 ) * direction;\n  col.a = 1.0;\n  col.r = texture2D( image, uv ).r;\n  col.g = texture2D( image, uv - ( off / resolution ) ).g;\n  col.b = texture2D( image, uv - 2.0 * ( off / resolution ) ).b;\n  return col;\n}\n\nvec3 linearToneMapping(vec3 color)\n{\n  float exposure = 1.;\n  color = clamp(exposure * color, 0., 1.);\n  color = pow(color, vec3(1. / gamma));\n  return color;\n}\n\nvec3 simpleReinhardToneMapping(vec3 color)\n{\n  float exposure = 1.5;\n  color *= exposure/(1. + color / exposure);\n  color = pow(color, vec3(1. / gamma));\n  return color;\n}\n\nvec3 lumaBasedReinhardToneMapping(vec3 color)\n{\n\tfloat luma = dot(color, vec3(0.2126, 0.7152, 0.0722));\n\tfloat toneMappedLuma = luma / (1. + luma);\n\tcolor *= toneMappedLuma / luma;\n\tcolor = pow(color, vec3(1. / gamma));\n\treturn color;\n}\n\nvec3 whitePreservingLumaBasedReinhardToneMapping(vec3 color)\n{\n\tfloat white = 2.;\n\tfloat luma = dot(color, vec3(0.2126, 0.7152, 0.0722));\n\tfloat toneMappedLuma = luma * (1. + luma / (white*white)) / (1. + luma);\n\tcolor *= toneMappedLuma / luma;\n\tcolor = pow(color, vec3(1. / gamma));\n\treturn color;\n}\n\nvec3 RomBinDaHouseToneMapping(vec3 color)\n{\n    color = exp( -1.0 / ( 2.72*color + 0.15 ) );\n\tcolor = pow(color, vec3(1. / gamma));\n\treturn color;\n}\n\nvec3 filmicToneMapping(vec3 color)\n{\n\tcolor = max(vec3(0.), color - vec3(0.004));\n\tcolor = (color * (6.2 * color + .5)) / (color * (6.2 * color + 1.7) + 0.06);\n\treturn color;\n}\n\nvec4 sharpen(in sampler2D tex, in vec2 coords, in vec2 renderSize) {\n  float dx = 1.0 / renderSize.x;\n  float dy = 1.0 / renderSize.y;\n  vec4 sum = vec4(0.0);\n  sum += -1. * texture2D(tex, coords + vec2( -1.0 * dx , 0.0 * dy));\n  sum += -1. * texture2D(tex, coords + vec2( 0.0 * dx , -1.0 * dy));\n  sum += 5. * texture2D(tex, coords + vec2( 0.0 * dx , 0.0 * dy));\n  sum += -1. * texture2D(tex, coords + vec2( 0.0 * dx , 1.0 * dy));\n  sum += -1. * texture2D(tex, coords + vec2( 1.0 * dx , 0.0 * dy));\n  return sum;\n}\n\nvoid main2 () {\n  gl_FragColor = texture2D(map, vUv);\n}\n\nvoid main () {\n  vec2 nq = vUv / (20.0 / resolution.xy);\n  float aspect = resolution.x / resolution.y;\n  // if (aspect > 1.0) nq.x *= aspect;\n  // else nq.y /= aspect;\n  vec4 noise = texture2D(noiseMap, nq);\n\n  vec2 q = vUv - 0.5;\n  float d = length(q);\n\n  float caVig = smoothstep(0.3, 0.75, d);\n  vec2 direction = ( vUv - 0.5 ) * mix(0.5, 4.0, caVig) * noise.r * 1.0;\n  // vec2 direction = ( vUv - 0.5 ) * caVig * noise.r * 4.0;\n  // vec2 direction = ( vUv - 0.5 ) * 2.0 * noise.r;\n  // vec3 colorTex = mix(\n  //   chromatic(map, vUv, direction).rgb,\n  //   sharpen(map, vUv, resolution).rgb,\n  //   0.25\n  // );\n\n\tvec2 fragCoord = vUv * resolution;\n\t// vec3 colorTex = mix(\n  //   fxaa(map, fragCoord, resolution).rgb,\n  //   sharpen(map, vUv, resolution).rgb,\n  //   0.25\n  // );\n  // vec3 colorTex = fxaa(map, fragCoord, resolution).rgb;\n  vec3 colorTex = clamp(chromatic(map, vUv, direction).rgb, 0.0, 1.0);\n  // vec3 colorTex = texture2D(map, vUv).rgb;\n  // vec3 colorTex = mix(\n  //   chromatic(map, vUv, direction).rgb,\n  //   fxaa(map, fragCoord, resolution).rgb,\n  //   1.0-caVig\n  // );\n\n  // vec3 raw = colorTex;\n\n  vec2 corner = vec2(1.0, 1.0);\n  vec2 delta = vUv - corner;\n  if (aspect < 1.0) delta.x *= aspect;\n  else delta.y /= aspect;\n  float gradDist = clamp(1.0 - length(delta), 0.0, 1.0);\n\n  // colorTex.rgb += mix(rampColor0, rampColor1, vUv.y) * 0.1;\n  // colorTex.rgb = blendSoftLight(colorTex, colorTex + mix(rampColor0, rampColor1, vUv.y), 0.25);\n\n  // colorTex += gradDist * 0.1;\n  // colorTex = blendOverlay(colorTex, colorTex + gradDist , 0.05);\n  // colorTex += mix(rampColor0, rampColor1, vUv.y) * 0.05;\n  // colorTex.rgb = blendSoftLight(colorTex, mix(rampColor0, rampColor1, vUv.y), 0.1);\n\n  float vignetteStrength = 1.0;\n  float vignetteDarken = 0.2;\n\n  colorTex = blendSoftLight(colorTex, (noise.rgb*2.0-1.0), 0.05);\n\n  // colorTex.rgb = colorLUT(colorTex.rgb, lutMap);\n  colorTex = mix(colorTex, colorTex * smoothstep(1.0, 0.35, d), vignetteStrength * vignetteDarken);\n  colorTex = blendOverlay(colorTex, colorTex * 1.0, smoothstep(0.3, 1.0, d) * vignetteStrength);\n  colorTex = blendOverlay(colorTex, colorTex * 0.5, smoothstep(0.4, 0.9, d) * vignetteStrength);\n\n  gl_FragColor = vec4(vec3(colorTex), 1.0);\n\n  // color ramp\n  // vec3 colorRamp = mix(rampColor0, rampColor1, linearGradient(\n  //   vUv + noise.rg * 0.05,\n  //   vec2(1.0, 0.0),\n  //   vec2(0.0, 1.0)\n  // ));\n\n  // gl_FragColor.rgb = blendOverlay(gl_FragColor.rgb, colorRamp, rampStrength);\n  gl_FragColor.rgb = colorLUT(gl_FragColor.rgb, lutMap);\n  \n  // float lightRamp = linearGradient(\n  //   vUv + noise.ba * 0.05,\n  //   vec2(0.0, 0.0),\n  //   vec2(1.0, 1.0)\n  // );\n  // lightRamp = pow(lightRamp, 3.5);\n  // float sa = sin(vUv.x * 10.0 + vUv.y * -5.0 + 0.5);\n  // float sb = sin(vUv.x * 7.0 + vUv.y * -7.0 + time * 0.0);\n  // float str = 1.0;//. mix(0.0, 1.0, sin(time * 0.25 + vUv.x * 3.5)*0.5+0.5);\n  // float lightStr = lightRamp;\n  // float lightStr = step(0.5, ((sa * sb) * 0.5 + 0.5));\n  // lightRamp = smoothstep(0.5, 1.0, lightRamp);\n  // gl_FragColor.rgb = blendSoftLight(gl_FragColor.rgb, vec3(1.5), rampStrength * lightStr);\n  // gl_FragColor.rgb = blendSoftLight(gl_FragColor.rgb, vec3(1.0), rampStrength * lightStr * 0.1 * lightRamp);\n\n  #ifdef HAS_FLOAT\n  gl_FragColor.rgb += clamp(texture2D(glowMap, vUv).rgb, 0.0, 1.0);\n  #endif\n\n  // gl_FragColor.rgb += vec3(lightStr);\n\n  gl_FragColor.rgb = clamp(gl_FragColor.rgb, 0.0, 1.0);\n\n  gl_FragColor.rgb = mix(gl_FragColor.rgb, vec3(fadeToBlackColor), fadeToBlack);\n\n  // gl_FragColor.rgb = texture2D(glowMap, vUv).rgb;\n  // gl_FragColor.rgb += blur(vUv,10.0/resolution.x, 1.0);\n}\n\n//524b19\n// 47411A";