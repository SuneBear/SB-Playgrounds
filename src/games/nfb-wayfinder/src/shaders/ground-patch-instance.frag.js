module.exports="#define GLSLIFY 1\nuniform sampler2D groundMap;\nuniform sampler2D worldMap;\nuniform sampler2D worldDataMap;\nuniform sampler2D spriteMap;\n\nuniform vec2 spriteTextureAtlasSize;\nuniform vec3 spriteColor;\nuniform vec3 highlightColor;\nuniform bool isSplitColor;\nuniform vec2 spriteTextureSize;\nuniform float highlightFactor;\nuniform vec2 resolution;\nuniform bool worldGrassMapEnabled;\n\nvarying vec2 vDataUv;\nvarying float vDataScale;\nvarying vec3 vGroundColor;\nvarying vec2 vUv;\nvarying vec2 vGroundUv;\nvarying vec2 vScreenUv;\nvarying vec2 vWorldUv;\nvarying vec3 vGrassColor;\nvarying float vHighlight;\nvarying vec2 vOriginalUv;\nvarying float gradientY;\n\nuniform float grassTipFactor;\n\nuniform sampler2D map;\n\nfloat luma(vec3 color) {\n  return dot(color, vec3(0.299, 0.587, 0.114));\n}\n\nfloat luma(vec4 color) {\n  return dot(color.rgb, vec3(0.299, 0.587, 0.114));\n}\n\nfloat dither8x8(vec2 position, float brightness) {\n  int x = int(mod(position.x, 8.0));\n  int y = int(mod(position.y, 8.0));\n  int index = x + y * 8;\n  float limit = 0.0;\n\n  if (x < 8) {\n    if (index == 0) limit = 0.015625;\n    if (index == 1) limit = 0.515625;\n    if (index == 2) limit = 0.140625;\n    if (index == 3) limit = 0.640625;\n    if (index == 4) limit = 0.046875;\n    if (index == 5) limit = 0.546875;\n    if (index == 6) limit = 0.171875;\n    if (index == 7) limit = 0.671875;\n    if (index == 8) limit = 0.765625;\n    if (index == 9) limit = 0.265625;\n    if (index == 10) limit = 0.890625;\n    if (index == 11) limit = 0.390625;\n    if (index == 12) limit = 0.796875;\n    if (index == 13) limit = 0.296875;\n    if (index == 14) limit = 0.921875;\n    if (index == 15) limit = 0.421875;\n    if (index == 16) limit = 0.203125;\n    if (index == 17) limit = 0.703125;\n    if (index == 18) limit = 0.078125;\n    if (index == 19) limit = 0.578125;\n    if (index == 20) limit = 0.234375;\n    if (index == 21) limit = 0.734375;\n    if (index == 22) limit = 0.109375;\n    if (index == 23) limit = 0.609375;\n    if (index == 24) limit = 0.953125;\n    if (index == 25) limit = 0.453125;\n    if (index == 26) limit = 0.828125;\n    if (index == 27) limit = 0.328125;\n    if (index == 28) limit = 0.984375;\n    if (index == 29) limit = 0.484375;\n    if (index == 30) limit = 0.859375;\n    if (index == 31) limit = 0.359375;\n    if (index == 32) limit = 0.0625;\n    if (index == 33) limit = 0.5625;\n    if (index == 34) limit = 0.1875;\n    if (index == 35) limit = 0.6875;\n    if (index == 36) limit = 0.03125;\n    if (index == 37) limit = 0.53125;\n    if (index == 38) limit = 0.15625;\n    if (index == 39) limit = 0.65625;\n    if (index == 40) limit = 0.8125;\n    if (index == 41) limit = 0.3125;\n    if (index == 42) limit = 0.9375;\n    if (index == 43) limit = 0.4375;\n    if (index == 44) limit = 0.78125;\n    if (index == 45) limit = 0.28125;\n    if (index == 46) limit = 0.90625;\n    if (index == 47) limit = 0.40625;\n    if (index == 48) limit = 0.25;\n    if (index == 49) limit = 0.75;\n    if (index == 50) limit = 0.125;\n    if (index == 51) limit = 0.625;\n    if (index == 52) limit = 0.21875;\n    if (index == 53) limit = 0.71875;\n    if (index == 54) limit = 0.09375;\n    if (index == 55) limit = 0.59375;\n    if (index == 56) limit = 1.0;\n    if (index == 57) limit = 0.5;\n    if (index == 58) limit = 0.875;\n    if (index == 59) limit = 0.375;\n    if (index == 60) limit = 0.96875;\n    if (index == 61) limit = 0.46875;\n    if (index == 62) limit = 0.84375;\n    if (index == 63) limit = 0.34375;\n  }\n\n  return brightness < limit ? 0.0 : 1.0;\n}\n\nvec3 dither8x8(vec2 position, vec3 color) {\n  return color * dither8x8(position, luma(color));\n}\n\nvec4 dither8x8(vec2 position, vec4 color) {\n  return vec4(color.rgb * dither8x8(position, luma(color)), 1.0);\n}\n\nconst mat4 thresholdMatrix = mat4(\n  vec4(1.0 / 17.0,  9.0 / 17.0,  3.0 / 17.0, 11.0 / 17.0),\n  vec4(13.0 / 17.0,  5.0 / 17.0, 15.0 / 17.0,  7.0 / 17.0),\n  vec4(4.0 / 17.0, 12.0 / 17.0,  2.0 / 17.0, 10.0 / 17.0),\n  vec4(16.0 / 17.0,  8.0 / 17.0, 14.0 / 17.0,  6.0 / 17.0)\n);\nconst mat4 _RowAccess = mat4(\n  vec4(1.0,0.0,0.0,0.0),\n  vec4(0.0,1.0,0.0,0.0),\n  vec4(0.0,0.0,1.0,0.0),\n  vec4(0.0,0.0,0.0,1.0)\n);\n\nfloat aastep(float threshold, float value) {\n  float change = fwidth(value) * 0.5;\n  float lo = threshold - change;\n  float hi = threshold + change;\n  return clamp((value - lo) / (hi - lo), 0.0, 1.0);\n}\n\n// void main () {\n//   float a = texture2D(map, vUv).r;\n//   if (a <= 0.5) discard;\n//   gl_FragColor.rgba = vec4(vec3(1.0), 1.0);\n// }\n\nvoid main () {\n  // gl_FragColor.rgba = vec4(vec3)\n  float a = texture2D(map, vUv).r;\n  if (a <= 0.5) discard;\n  // gl_FragColor.rgba = vec4(vec3(1.0), a);\n\n  float dScale = vDataScale;\n  vec3 groundColor = vGroundColor.rgb;\n  float K = pow(gradientY, 0.5);\n\n  float highlight = mix(vHighlight, 1.0, dScale);\n  gl_FragColor.rgb = mix(groundColor, groundColor * grassTipFactor, gradientY) + smoothstep(0.5, 1.0, highlight) * 0.5 * gradientY;\n  gl_FragColor.a = 1.0;\n  // gl_FragColor.rgba = clamp(gl_FragColor.rgba, 0.0, 1.0);\n  // gl_FragColor.a *= pow(gradientY, 0.1); // alpha\n}\n";