/* components/HaikuInventorySlot.svelte generated by Svelte v3.31.0 */
import {
	SvelteComponent,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	transition_in,
	transition_out
} from "svelte/internal";

import emptyHaiku from "../assets/image/ui/ico_emptyHaiku.png";
import filledHaiku from "../assets/image/ui/ico_completedHaiku.png";
import Assets from "../util/Assets";
import Image from "./Image.svelte";

function create_fragment(ctx) {
	let div;
	let image;
	let current;

	image = new Image({
			props: {
				id: /*collected*/ ctx[0] ? filled : empty
			}
		});

	return {
		c() {
			div = element("div");
			create_component(image.$$.fragment);
			attr(div, "class", "haiku-slot svelte-ohjn7u");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(image, div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const image_changes = {};
			if (dirty & /*collected*/ 1) image_changes.id = /*collected*/ ctx[0] ? filled : empty;
			image.$set(image_changes);
		},
		i(local) {
			if (current) return;
			transition_in(image.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(image.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(image);
		}
	};
}

const empty = "image/ui/ico_emptyHaiku";
const filled = "image/ui/ico_completedHaiku";

function instance($$self, $$props, $$invalidate) {
	Assets.prepare(empty);
	let { collected = false } = $$props;

	$$self.$$set = $$props => {
		if ("collected" in $$props) $$invalidate(0, collected = $$props.collected);
	};

	return [collected];
}

class HaikuInventorySlot extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { collected: 0 });
	}
}

export default HaikuInventorySlot;