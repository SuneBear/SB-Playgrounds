/* components/CornerMenuButton.svelte generated by Svelte v3.31.0 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	bubble,
	check_outros,
	create_component,
	create_in_transition,
	create_out_transition,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	toggle_class,
	transition_in,
	transition_out
} from "svelte/internal";

import IconButton from "./IconButton.svelte";
import { fade } from "svelte/transition";
import { fadeOpacityTransition } from "../animations/transitions";
import eases from "eases";

function create_if_block(ctx) {
	let div;
	let div_intro;
	let div_outro;
	let current;

	return {
		c() {
			div = element("div");
			attr(div, "class", "notification svelte-bbjv");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (div_outro) div_outro.end(1);

				if (!div_intro) div_intro = create_in_transition(div, transitionScale, {
					delay: 500,
					easing: eases.expoOut,
					duration: 1000
				});

				div_intro.start();
			});

			current = true;
		},
		o(local) {
			if (div_intro) div_intro.invalidate();

			div_outro = create_out_transition(div, transitionScale, {
				delay: 0,
				easing: eases.expoOut,
				duration: 1000
			});

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching && div_outro) div_outro.end();
		}
	};
}

function create_fragment(ctx) {
	let div;
	let iconbutton;
	let t;
	let div_intro;
	let div_outro;
	let current;

	iconbutton = new IconButton({
			props: {
				size: /*size*/ ctx[6],
				icon: /*icon*/ ctx[3],
				image: /*image*/ ctx[4],
				id: /*id*/ ctx[5]
			}
		});

	iconbutton.$on("click", /*click_handler*/ ctx[10]);
	iconbutton.$on("touchstart", /*touchstart_handler*/ ctx[11]);
	iconbutton.$on("mousedown", /*mousedown_handler*/ ctx[12]);
	let if_block = /*showNotification*/ ctx[8] && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			create_component(iconbutton.$$.fragment);
			t = space();
			if (if_block) if_block.c();
			attr(div, "class", "menu-button svelte-bbjv");
			attr(div, "style", /*style*/ ctx[7]);
			toggle_class(div, "topLeft", /*topLeft*/ ctx[0]);
			toggle_class(div, "topRight", /*topRight*/ ctx[1]);
			toggle_class(div, "bottomRight", /*bottomRight*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(iconbutton, div, null);
			append(div, t);
			if (if_block) if_block.m(div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const iconbutton_changes = {};
			if (dirty & /*size*/ 64) iconbutton_changes.size = /*size*/ ctx[6];
			if (dirty & /*icon*/ 8) iconbutton_changes.icon = /*icon*/ ctx[3];
			if (dirty & /*image*/ 16) iconbutton_changes.image = /*image*/ ctx[4];
			if (dirty & /*id*/ 32) iconbutton_changes.id = /*id*/ ctx[5];
			iconbutton.$set(iconbutton_changes);

			if (/*showNotification*/ ctx[8]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*showNotification*/ 256) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty & /*style*/ 128) {
				attr(div, "style", /*style*/ ctx[7]);
			}

			if (dirty & /*topLeft*/ 1) {
				toggle_class(div, "topLeft", /*topLeft*/ ctx[0]);
			}

			if (dirty & /*topRight*/ 2) {
				toggle_class(div, "topRight", /*topRight*/ ctx[1]);
			}

			if (dirty & /*bottomRight*/ 4) {
				toggle_class(div, "bottomRight", /*bottomRight*/ ctx[2]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(iconbutton.$$.fragment, local);
			transition_in(if_block);

			add_render_callback(() => {
				if (div_outro) div_outro.end(1);
				if (!div_intro) div_intro = create_in_transition(div, fadeOpacityTransition, { delay: 250 });
				div_intro.start();
			});

			current = true;
		},
		o(local) {
			transition_out(iconbutton.$$.fragment, local);
			transition_out(if_block);
			if (div_intro) div_intro.invalidate();
			div_outro = create_out_transition(div, fadeOpacityTransition, {});
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(iconbutton);
			if (if_block) if_block.d();
			if (detaching && div_outro) div_outro.end();
		}
	};
}

function transitionScale(node, { delay = 0, duration = 500, easing = x => x, baseScale = 0 }) {
	// const o = +getComputedStyle(node).opacity;
	const m = getComputedStyle(node).transform.match(/scale\(([0-9.]+)\)/);

	const s = m ? m[1] : 1;
	const is = 1 - baseScale;

	return {
		delay,
		duration,
		css: t => {
			const eased = easing(t);
			return `transform: scale(${eased * s * is + baseScale})`;
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { topLeft = false } = $$props;
	let { topRight = false } = $$props;
	let { bottomRight = false } = $$props;
	let { icon = undefined } = $$props;
	let { image = undefined } = $$props;
	let { id = undefined } = $$props;
	let { size = null } = $$props;
	let { style = "" } = $$props;
	let showNotification = false, notifyTimer = null;

	function notify() {
		$$invalidate(8, showNotification = true);
		clearTimeout(notifyTimer);

		notifyTimer = setTimeout(
			() => {
				$$invalidate(8, showNotification = false);
			},
			1500
		);
	}

	function click_handler(event) {
		bubble($$self, event);
	}

	function touchstart_handler(event) {
		bubble($$self, event);
	}

	function mousedown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$props => {
		if ("topLeft" in $$props) $$invalidate(0, topLeft = $$props.topLeft);
		if ("topRight" in $$props) $$invalidate(1, topRight = $$props.topRight);
		if ("bottomRight" in $$props) $$invalidate(2, bottomRight = $$props.bottomRight);
		if ("icon" in $$props) $$invalidate(3, icon = $$props.icon);
		if ("image" in $$props) $$invalidate(4, image = $$props.image);
		if ("id" in $$props) $$invalidate(5, id = $$props.id);
		if ("size" in $$props) $$invalidate(6, size = $$props.size);
		if ("style" in $$props) $$invalidate(7, style = $$props.style);
	};

	return [
		topLeft,
		topRight,
		bottomRight,
		icon,
		image,
		id,
		size,
		style,
		showNotification,
		notify,
		click_handler,
		touchstart_handler,
		mousedown_handler
	];
}

class CornerMenuButton extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			topLeft: 0,
			topRight: 1,
			bottomRight: 2,
			icon: 3,
			image: 4,
			id: 5,
			size: 6,
			style: 7,
			notify: 9
		});
	}

	get notify() {
		return this.$$.ctx[9];
	}
}

export default CornerMenuButton;