/* components/CloseButton.svelte generated by Svelte v3.31.0 */
import {
	SvelteComponent,
	add_render_callback,
	attr,
	bubble,
	create_component,
	create_in_transition,
	create_out_transition,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	safe_not_equal,
	transition_in,
	transition_out
} from "svelte/internal";

import { onMount } from "svelte";
import { fadeInTransition, transition } from "../animations/transitions";
import Image from "../components/Image.svelte";

function create_fragment(ctx) {
	let div;
	let image;
	let div_intro;
	let div_outro;
	let current;
	let mounted;
	let dispose;

	image = new Image({
			props: {
				width: "100%",
				id: "image/ui/close-button"
			}
		});

	return {
		c() {
			div = element("div");
			create_component(image.$$.fragment);
			attr(div, "class", "close-button svelte-d162at");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(image, div, null);
			current = true;

			if (!mounted) {
				dispose = listen(div, "click", /*click_handler*/ ctx[1]);
				mounted = true;
			}
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;
		},
		i(local) {
			if (current) return;
			transition_in(image.$$.fragment, local);

			add_render_callback(() => {
				if (div_outro) div_outro.end(1);
				if (!div_intro) div_intro = create_in_transition(div, fadeInTransition, { delay: /*delay*/ ctx[0], duration: 100 });
				div_intro.start();
			});

			current = true;
		},
		o(local) {
			transition_out(image.$$.fragment, local);
			if (div_intro) div_intro.invalidate();
			div_outro = create_out_transition(div, fadeInTransition, { delay: /*delay*/ ctx[0], duration: 100 });
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(image);
			if (detaching && div_outro) div_outro.end();
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { delay = 0 } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$props => {
		if ("delay" in $$props) $$invalidate(0, delay = $$props.delay);
	};

	return [delay, click_handler];
}

class CloseButton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { delay: 0 });
	}
}

export default CloseButton;