/* components/HaikuInventory.svelte generated by Svelte v3.31.0 */
import {
	SvelteComponent,
	add_render_callback,
	attr,
	check_outros,
	create_component,
	create_in_transition,
	create_out_transition,
	destroy_component,
	destroy_each,
	detach,
	element,
	globals,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	transition_in,
	transition_out
} from "svelte/internal";

const { Boolean: Boolean_1 } = globals;
import { fade } from "svelte/transition";
import { onDestroy, onMount } from "svelte";
import { fadeOpacityTransition } from "../animations/transitions";
import HaikuInventorySlot from "./HaikuInventorySlot.svelte";
import emptyHaiku from "../assets/image/ui/ico_emptyHaiku.png";
import filledHaiku from "../assets/image/ui/ico_completedHaiku.png";
import journalButton from "../assets/image/ui/ico_journal.png";
import CornerMenuButton from "./CornerMenuButton.svelte";
import { createEventDispatcher } from "svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	return child_ctx;
}

// (81:2) {#each elements as collected}
function create_each_block(ctx) {
	let haikuinventoryslot;
	let current;

	haikuinventoryslot = new HaikuInventorySlot({
			props: { collected: /*collected*/ ctx[13] }
		});

	return {
		c() {
			create_component(haikuinventoryslot.$$.fragment);
		},
		m(target, anchor) {
			mount_component(haikuinventoryslot, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const haikuinventoryslot_changes = {};
			if (dirty & /*elements*/ 1) haikuinventoryslot_changes.collected = /*collected*/ ctx[13];
			haikuinventoryslot.$set(haikuinventoryslot_changes);
		},
		i(local) {
			if (current) return;
			transition_in(haikuinventoryslot.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(haikuinventoryslot.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(haikuinventoryslot, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let div_intro;
	let div_outro;
	let current;
	let each_value = /*elements*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "haiku-container svelte-1wphodo");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*elements*/ 1) {
				each_value = /*elements*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			add_render_callback(() => {
				if (div_outro) div_outro.end(1);
				if (!div_intro) div_intro = create_in_transition(div, fadeOpacityTransition, { delay: 250 });
				div_intro.start();
			});

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean_1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			if (div_intro) div_intro.invalidate();
			div_outro = create_out_transition(div, fadeOpacityTransition, {});
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
			if (detaching && div_outro) div_outro.end();
		}
	};
}

const forceShowDuration = 4000;

function instance($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { store } = $$props;
	let slots = [];
	let showTimeout = null;
	let forceShow = false;
	let elements = [];
	let lastCollected = 0;
	let moving = false;
	let shouldShow = false;
	let mounted = false;
	let state;

	const unmount = store.subscribe(v => {
		moving = v.moving;
		state = v.state; // not sure why svelte needs to track this inside this component?
		const total = v.haikusTotal;
		const collected = v.haikusCollected || 0;

		$$invalidate(0, elements = new Array(total).fill(false).map((_, i) => {
			return i < collected;
		}));

		if (lastCollected !== collected) {
			forceShow = true;
			clearTimeout(showTimeout);

			showTimeout = setTimeout(
				() => {
					forceShow = false;
					updateShow();
				},
				forceShowDuration
			);
		}

		lastCollected = collected;
		updateShow();
	});

	onMount(() => {
		mounted = true;
	});

	onDestroy(() => {
		mounted = false;
		forceShow = false;
		clearTimeout(showTimeout);
		unmount();
	});

	function updateShow() {
		shouldShow = !state && (forceShow || !moving || elements.length > 0 && elements.every(Boolean));
	}

	$$self.$$set = $$props => {
		if ("store" in $$props) $$invalidate(1, store = $$props.store);
	};

	return [elements, store];
}

class HaikuInventory extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { store: 1 });
	}
}

export default HaikuInventory;