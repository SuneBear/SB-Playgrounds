/* components/Image.svelte generated by Svelte v3.31.0 */
import {
	SvelteComponent,
	add_render_callback,
	attr,
	binding_callbacks,
	bubble,
	create_in_transition,
	create_out_transition,
	detach,
	element,
	init,
	insert,
	listen,
	run_all,
	safe_not_equal,
	set_style,
	toggle_class
} from "svelte/internal";

import { onMount } from "svelte";
import { emptyTransition } from "../animations/transitions";
import Assets from "../util/Assets";

import {
	createTokenCanvas,
	getTokenSheet,
	loadTokenSprites
} from "../util/tokens";

function create_fragment(ctx) {
	let div;
	let div_intro;
	let div_outro;
	let current;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			attr(div, "class", "image-container svelte-kj6g8f");
			set_style(div, "width", /*width*/ ctx[0]);
			set_style(div, "height", /*height*/ ctx[1]);
			toggle_class(div, "ignorePointer", /*ignorePointer*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			/*div_binding*/ ctx[14](div);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "introend", /*introend_handler*/ ctx[10]),
					listen(div, "introstart", /*introstart_handler*/ ctx[11]),
					listen(div, "outroend", /*outroend_handler*/ ctx[12]),
					listen(div, "outrostart", /*outrostart_handler*/ ctx[13])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*width*/ 1) {
				set_style(div, "width", /*width*/ ctx[0]);
			}

			if (!current || dirty & /*height*/ 2) {
				set_style(div, "height", /*height*/ ctx[1]);
			}

			if (dirty & /*ignorePointer*/ 16) {
				toggle_class(div, "ignorePointer", /*ignorePointer*/ ctx[4]);
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (div_outro) div_outro.end(1);
				if (!div_intro) div_intro = create_in_transition(div, /*inTransition*/ ctx[2], {});
				div_intro.start();
			});

			current = true;
		},
		o(local) {
			if (div_intro) div_intro.invalidate();
			div_outro = create_out_transition(div, /*outTransition*/ ctx[3], {});
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			/*div_binding*/ ctx[14](null);
			if (detaching && div_outro) div_outro.end();
			mounted = false;
			run_all(dispose);
		}
	};
}

function clearChildren(el) {
	while (el.firstChild) {
		el.removeChild(el.firstChild);
	}
}

function instance($$self, $$props, $$invalidate) {
	let { alt = "" } = $$props;
	let { width = "initial" } = $$props;
	let { height = "initial" } = $$props;
	let { id } = $$props;
	let { image = undefined } = $$props;
	let { token = false } = $$props;
	let { inTransition = emptyTransition } = $$props;
	let { outTransition = emptyTransition } = $$props;
	let { ignorePointer = false } = $$props;
	let p = Promise.resolve();
	let events = [];
	let destroying = false;
	let container;

	onMount(() => {
		events.forEach(fn => fn());
		events.length = 0;

		return () => {
			events.length = 0;
			destroying = true;
		}; // destroy...
	});

	async function change(image, token, id) {
		events.length = 0;
		await p;

		if (image) {
			if (typeof image.then === "function") p = image; else p = Promise.resolve(image);
		} else {
			if (token) {
				p = createTokenCanvas(id);
			} else {
				p = Assets.load(id);
			}
		}

		const img = await p;

		if (container) {
			// already mounted, clear and append
			mount();
		} else {
			events.push(mount);
		}

		function mount() {
			if (destroying) return;
			clearChildren(container);
			const newNode = image || token ? img : img.cloneNode();
			newNode.setAttribute("draggable", false);
			container.appendChild(newNode);
		}
	}

	function introend_handler(event) {
		bubble($$self, event);
	}

	function introstart_handler(event) {
		bubble($$self, event);
	}

	function outroend_handler(event) {
		bubble($$self, event);
	}

	function outrostart_handler(event) {
		bubble($$self, event);
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			container = $$value;
			$$invalidate(5, container);
		});
	}

	$$self.$$set = $$props => {
		if ("alt" in $$props) $$invalidate(6, alt = $$props.alt);
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("id" in $$props) $$invalidate(7, id = $$props.id);
		if ("image" in $$props) $$invalidate(8, image = $$props.image);
		if ("token" in $$props) $$invalidate(9, token = $$props.token);
		if ("inTransition" in $$props) $$invalidate(2, inTransition = $$props.inTransition);
		if ("outTransition" in $$props) $$invalidate(3, outTransition = $$props.outTransition);
		if ("ignorePointer" in $$props) $$invalidate(4, ignorePointer = $$props.ignorePointer);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*image, token, id*/ 896) {
			$: change(image, token, id);
		}
	};

	return [
		width,
		height,
		inTransition,
		outTransition,
		ignorePointer,
		container,
		alt,
		id,
		image,
		token,
		introend_handler,
		introstart_handler,
		outroend_handler,
		outrostart_handler,
		div_binding
	];
}

class Image extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			alt: 6,
			width: 0,
			height: 1,
			id: 7,
			image: 8,
			token: 9,
			inTransition: 2,
			outTransition: 3,
			ignorePointer: 4
		});
	}
}

export default Image;