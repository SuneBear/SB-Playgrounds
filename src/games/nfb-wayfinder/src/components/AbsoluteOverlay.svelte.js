/* components/AbsoluteOverlay.svelte generated by Svelte v3.31.0 */
import {
	SvelteComponent,
	add_render_callback,
	attr,
	bubble,
	create_bidirectional_transition,
	create_slot,
	detach,
	element,
	init,
	insert,
	listen,
	safe_not_equal,
	toggle_class,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { fade as fadeTransition } from "svelte/transition";
import { fadeOpacityTransition } from "../animations/transitions";

function create_fragment(ctx) {
	let div;
	let div_transition;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			attr(div, "class", "svelte-r34ayh");
			toggle_class(div, "disableInteraction", /*disableInteraction*/ ctx[2]);
			toggle_class(div, "darken", /*darken*/ ctx[0]);
			toggle_class(div, "darkenTransition", /*darkenTransition*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen(div, "click", /*click_handler*/ ctx[7]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 32) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], dirty, null, null);
				}
			}

			if (dirty & /*disableInteraction*/ 4) {
				toggle_class(div, "disableInteraction", /*disableInteraction*/ ctx[2]);
			}

			if (dirty & /*darken*/ 1) {
				toggle_class(div, "darken", /*darken*/ ctx[0]);
			}

			if (dirty & /*darkenTransition*/ 2) {
				toggle_class(div, "darkenTransition", /*darkenTransition*/ ctx[1]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);

			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(div, /*fadeInOut*/ ctx[3], {}, true);
				div_transition.run(1);
			});

			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			if (!div_transition) div_transition = create_bidirectional_transition(div, /*fadeInOut*/ ctx[3], {}, false);
			div_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			if (detaching && div_transition) div_transition.end();
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { darken = false } = $$props;
	let { darkenTransition = false } = $$props;
	let { disableInteraction = false } = $$props;
	let { fade = true } = $$props;

	let fadeInOut = fade
	? fadeOpacityTransition
	: () => {
			
		};

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$props => {
		if ("darken" in $$props) $$invalidate(0, darken = $$props.darken);
		if ("darkenTransition" in $$props) $$invalidate(1, darkenTransition = $$props.darkenTransition);
		if ("disableInteraction" in $$props) $$invalidate(2, disableInteraction = $$props.disableInteraction);
		if ("fade" in $$props) $$invalidate(4, fade = $$props.fade);
		if ("$$scope" in $$props) $$invalidate(5, $$scope = $$props.$$scope);
	};

	return [
		darken,
		darkenTransition,
		disableInteraction,
		fadeInOut,
		fade,
		$$scope,
		slots,
		click_handler
	];
}

class AbsoluteOverlay extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			darken: 0,
			darkenTransition: 1,
			disableInteraction: 2,
			fade: 4
		});
	}
}

export default AbsoluteOverlay;