/* overlays/GamePages.svelte generated by Svelte v3.31.0 */
import {
	SvelteComponent,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "svelte/internal";

import GamePageLanding from "./GamePageLanding.svelte";
import About from "./About.svelte";
import getConfig from "../config";
import HaikuPopup from "./HaikuPopup.svelte";
import PoemCollection from "./PoemCollectionOverlay.svelte";
import SimpleHintOverlay from "./SimpleHintOverlay.svelte";
import GameHUD from "./GameHUD.svelte";
import GameUIIntro from "./GameUIIntro.svelte";
import { onMount, onDestroy } from "svelte";
import TransitionOverlay from "./TransitionOverlay.svelte";
import { log } from "three";
import { hideHeader, sendAnalytics } from "../nfb";
import { context } from "../alec-svelte";
import * as Tags from "../tags";

function create_if_block_8(ctx) {
	let gamehud;
	let current;

	gamehud = new GameHUD({
			props: {
				moving: /*moving*/ ctx[11],
				canCollectTokens: /*canCollectTokens*/ ctx[10],
				finishedHaikus: /*finishedHaikus*/ ctx[8],
				store: /*store*/ ctx[0],
				currentHaiku: /*currentHaiku*/ ctx[2]
			}
		});

	gamehud.$on("journal", /*journal_handler*/ ctx[16]);
	gamehud.$on("pause", /*pause_handler*/ ctx[17]);

	return {
		c() {
			create_component(gamehud.$$.fragment);
		},
		m(target, anchor) {
			mount_component(gamehud, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const gamehud_changes = {};
			if (dirty & /*moving*/ 2048) gamehud_changes.moving = /*moving*/ ctx[11];
			if (dirty & /*canCollectTokens*/ 1024) gamehud_changes.canCollectTokens = /*canCollectTokens*/ ctx[10];
			if (dirty & /*finishedHaikus*/ 256) gamehud_changes.finishedHaikus = /*finishedHaikus*/ ctx[8];
			if (dirty & /*store*/ 1) gamehud_changes.store = /*store*/ ctx[0];
			if (dirty & /*currentHaiku*/ 4) gamehud_changes.currentHaiku = /*currentHaiku*/ ctx[2];
			gamehud.$set(gamehud_changes);
		},
		i(local) {
			if (current) return;
			transition_in(gamehud.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(gamehud.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(gamehud, detaching);
		}
	};
}

// (192:24) 
function create_if_block_6(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*currentHaiku*/ ctx[2] && create_if_block_7(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*currentHaiku*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*currentHaiku*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_7(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (190:30) 
function create_if_block_5(ctx) {
	let poemcollection;
	let current;

	poemcollection = new PoemCollection({
			props: { poems: /*finishedHaikus*/ ctx[8] }
		});

	poemcollection.$on("close", /*close_handler*/ ctx[22]);

	return {
		c() {
			create_component(poemcollection.$$.fragment);
		},
		m(target, anchor) {
			mount_component(poemcollection, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const poemcollection_changes = {};
			if (dirty & /*finishedHaikus*/ 256) poemcollection_changes.poems = /*finishedHaikus*/ ctx[8];
			poemcollection.$set(poemcollection_changes);
		},
		i(local) {
			if (current) return;
			transition_in(poemcollection.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(poemcollection.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(poemcollection, detaching);
		}
	};
}

// (143:51) 
function create_if_block_3(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_4, create_else_block];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*showIntro*/ ctx[13]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (141:28) 
function create_if_block_2(ctx) {
	let transitionoverlay;
	let current;
	transitionoverlay = new TransitionOverlay({});

	return {
		c() {
			create_component(transitionoverlay.$$.fragment);
		},
		m(target, anchor) {
			mount_component(transitionoverlay, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(transitionoverlay.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(transitionoverlay.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(transitionoverlay, detaching);
		}
	};
}

// (139:0) {#if embed}
function create_if_block_1(ctx) {
	let div;

	return {
		c() {
			div = element("div");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (193:2) {#if currentHaiku}
function create_if_block_7(ctx) {
	let haikupopup;
	let current;

	haikupopup = new HaikuPopup({
			props: {
				store: /*store*/ ctx[0],
				lines: /*currentHaiku*/ ctx[2].lines,
				tokens: /*currentHaiku*/ ctx[2].tokens
			}
		});

	haikupopup.$on("close", /*closeHaikuPopup*/ ctx[14]);

	return {
		c() {
			create_component(haikupopup.$$.fragment);
		},
		m(target, anchor) {
			mount_component(haikupopup, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const haikupopup_changes = {};
			if (dirty & /*store*/ 1) haikupopup_changes.store = /*store*/ ctx[0];
			if (dirty & /*currentHaiku*/ 4) haikupopup_changes.lines = /*currentHaiku*/ ctx[2].lines;
			if (dirty & /*currentHaiku*/ 4) haikupopup_changes.tokens = /*currentHaiku*/ ctx[2].tokens;
			haikupopup.$set(haikupopup_changes);
		},
		i(local) {
			if (current) return;
			transition_in(haikupopup.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(haikupopup.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(haikupopup, detaching);
		}
	};
}

// (153:2) {:else}
function create_else_block(ctx) {
	let gamepagelanding;
	let current;

	gamepagelanding = new GamePageLanding({
			props: {
				start: !/*pause*/ ctx[5],
				endState: /*endState*/ ctx[6],
				introTitle: /*introTitle*/ ctx[12],
				poems: /*finishedHaikus*/ ctx[8]
			}
		});

	gamepagelanding.$on("play", /*play_handler*/ ctx[20]);
	gamepagelanding.$on("journal", journal_handler_1);
	gamepagelanding.$on("about", /*about_handler*/ ctx[21]);

	return {
		c() {
			create_component(gamepagelanding.$$.fragment);
		},
		m(target, anchor) {
			mount_component(gamepagelanding, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const gamepagelanding_changes = {};
			if (dirty & /*pause*/ 32) gamepagelanding_changes.start = !/*pause*/ ctx[5];
			if (dirty & /*endState*/ 64) gamepagelanding_changes.endState = /*endState*/ ctx[6];
			if (dirty & /*introTitle*/ 4096) gamepagelanding_changes.introTitle = /*introTitle*/ ctx[12];
			if (dirty & /*finishedHaikus*/ 256) gamepagelanding_changes.poems = /*finishedHaikus*/ ctx[8];
			gamepagelanding.$set(gamepagelanding_changes);
		},
		i(local) {
			if (current) return;
			transition_in(gamepagelanding.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(gamepagelanding.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(gamepagelanding, detaching);
		}
	};
}

// (144:2) {#if showIntro}
function create_if_block_4(ctx) {
	let gameuiintro;
	let current;
	gameuiintro = new GameUIIntro({});
	gameuiintro.$on("inbetween", /*inbetween_handler*/ ctx[18]);
	gameuiintro.$on("end", /*end_handler*/ ctx[19]);

	return {
		c() {
			create_component(gameuiintro.$$.fragment);
		},
		m(target, anchor) {
			mount_component(gameuiintro, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(gameuiintro.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(gameuiintro.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(gameuiintro, detaching);
		}
	};
}

// (203:0) {#if state === "about"}
function create_if_block(ctx) {
	let about;
	let current;
	about = new About({});
	about.$on("close", /*close_handler_1*/ ctx[23]);

	return {
		c() {
			create_component(about.$$.fragment);
		},
		m(target, anchor) {
			mount_component(about, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(about.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(about.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(about, detaching);
		}
	};
}

function create_fragment(ctx) {
	let t0;
	let current_block_type_index;
	let if_block1;
	let t1;
	let if_block2_anchor;
	let current;
	let if_block0 = !/*embed*/ ctx[1] && !/*hideHUD*/ ctx[9] && !/*resolving*/ ctx[3] && !/*transitionOverlay*/ ctx[7] && !/*state*/ ctx[4] && create_if_block_8(ctx);

	const if_block_creators = [
		create_if_block_1,
		create_if_block_2,
		create_if_block_3,
		create_if_block_5,
		create_if_block_6
	];

	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*embed*/ ctx[1]) return 0;
		if (/*transitionOverlay*/ ctx[7]) return 1;
		if (/*state*/ ctx[4] === "landing" || /*state*/ ctx[4] === "about") return 2;
		if (/*state*/ ctx[4] === "journal") return 3;
		if (/*state*/ ctx[4] == null) return 4;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx, -1))) {
		if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	let if_block2 = /*state*/ ctx[4] === "about" && create_if_block(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, if_block2_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!/*embed*/ ctx[1] && !/*hideHUD*/ ctx[9] && !/*resolving*/ ctx[3] && !/*transitionOverlay*/ ctx[7] && !/*state*/ ctx[4]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*embed, hideHUD, resolving, transitionOverlay, state*/ 666) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_8(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block1) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block1 = if_blocks[current_block_type_index];

					if (!if_block1) {
						if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block1.c();
					} else {
						if_block1.p(ctx, dirty);
					}

					transition_in(if_block1, 1);
					if_block1.m(t1.parentNode, t1);
				} else {
					if_block1 = null;
				}
			}

			if (/*state*/ ctx[4] === "about") {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*state*/ 16) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}

			if (detaching) detach(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(if_block2_anchor);
		}
	};
}

const haikuCardDuration = 10000;
const transitionDuration = 3500;

const journal_handler_1 = () => {
	
}; // sendAnalytics({
// pageview: "journal",

function instance($$self, $$props, $$invalidate) {
	let { store } = $$props;
	const { entity } = context();
	let embed;
	let currentHaiku;
	let transitionTimer;

	// let hintTimer;
	let resolving;

	// const hintDuration = 4000;
	let state,
		pause,
		endState,
		transitionOverlay,
		finishedHaikus,
		currentHint,
		hoverState,
		hideHUD,
		canCollectTokens,
		moving;

	let introTitle = false;
	let showIntro = false;

	const unmount = store.subscribe(v => {
		$$invalidate(1, embed = v.embed);
		$$invalidate(13, showIntro = v.intro);
		$$invalidate(12, introTitle = v.introTitle);
		$$invalidate(4, state = v.state);
		$$invalidate(5, pause = v.pause);
		$$invalidate(6, endState = v.endState);
		hoverState = v.isButtonHovered;
		$$invalidate(3, resolving = v.resolving);
		$$invalidate(8, finishedHaikus = v.finishedHaikus);
		$$invalidate(10, canCollectTokens = v.canCollectTokens);
		$$invalidate(9, hideHUD = v.hideHUD);
		$$invalidate(11, moving = v.moving);
		const oldHint = currentHint;

		if (v.moving && currentHint) {
			// clearTimeout(hintTimer);
			store.update(d => ({ ...d, hint: null }));
		}

		if (!state && introTitle) {
			// after we change state, no longer make the title slow
			store.update(d => ({ ...d, introTitle: false }));
		}

		currentHint = v.hint;

		// if (currentHint !== oldHint && currentHint) {
		//   clearTimeout(hintTimer);
		//   hintTimer = setTimeout(() => {
		//     store.update((d) => ({ ...d, hint: null }));
		//   }, hintDuration);
		// } else if (currentHint !== oldHint && !currentHint) {
		//   clearTimeout(hintTimer);
		// }
		const oldTransition = transitionOverlay;

		$$invalidate(7, transitionOverlay = v.transitionOverlay);

		if (oldTransition !== transitionOverlay && transitionOverlay) {
			if (!getConfig().demo) {
				clearTimeout(transitionTimer);

				transitionTimer = setTimeout(
					() => {
						store.update(d => ({ ...d, transitionOverlay: false }));
					},
					transitionDuration
				);
			}
		}

		const oldHaiku = currentHaiku;
		$$invalidate(2, currentHaiku = v.newlyCollectedHaiku);

		if (resolving) {
			$$invalidate(2, currentHaiku = null);
		}

		const isGameActive = !state;

		// const isActive = !state && !v.transitionOverlay;
		if (isGameActive !== v.active) {
			store.update(d => ({ ...d, active: isGameActive }));
		}
	});

	onDestroy(() => {
		unmount();
		clearTimeout(transitionTimer);
	});

	function closeHaikuPopup() {
		sendAnalytics({
			event: "poem_collect",
			eventLabel: "poem_collect"
		});

		store.update(d => ({
			...d,
			playing: true,
			newlyCollectedHaiku: null
		}));
	}

	function setState(state, opts = {}) {
		store.update(d => ({ ...d, ...opts, state }));
	}

	const journal_handler = () => {
		setState("journal");
	};

	const pause_handler = () => {
		setState("landing", { pause: true });
	};

	const inbetween_handler = () => {
		store.update(d => ({ ...d, initGame: true }));
	};

	const end_handler = () => {
		store.update(d => ({ ...d, introTitle: true, intro: false }));
	};

	const play_handler = () => {
		hideHeader();
		setState(null);
		store.update(d => ({ ...d, playing: true }));
	}; // entity.tagOff(Tags.ButtonClick);
	// entity.tagOn(Tags.ButtonClick);

	const about_handler = () => {
		sendAnalytics({ pageview: "about" });
		setState("about");
	}; // entity.tagOff(Tags.ButtonClick);
	// entity.tagOn(Tags.ButtonClick);

	const close_handler = () => setState(null);

	const close_handler_1 = () => {
		setState("landing");
	};

	$$self.$$set = $$props => {
		if ("store" in $$props) $$invalidate(0, store = $$props.store);
	};

	return [
		store,
		embed,
		currentHaiku,
		resolving,
		state,
		pause,
		endState,
		transitionOverlay,
		finishedHaikus,
		hideHUD,
		canCollectTokens,
		moving,
		introTitle,
		showIntro,
		closeHaikuPopup,
		setState,
		journal_handler,
		pause_handler,
		inbetween_handler,
		end_handler,
		play_handler,
		about_handler,
		close_handler,
		close_handler_1
	];
}

class GamePages extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { store: 0 });
	}
}

export default GamePages;