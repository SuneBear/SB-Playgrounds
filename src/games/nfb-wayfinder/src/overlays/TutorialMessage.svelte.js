/* overlays/TutorialMessage.svelte generated by Svelte v3.31.0 */
import {
	SvelteComponent,
	add_render_callback,
	attr,
	check_outros,
	create_component,
	create_in_transition,
	create_out_transition,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	safe_not_equal,
	subscribe,
	toggle_class,
	transition_in,
	transition_out
} from "svelte/internal";

import { fade } from "svelte/transition";
import { onMount, onDestroy } from "svelte";
import { context } from "../alec-svelte";
import * as Tags from "../tags";
import getConfig from "../config";
import AnimatedTextSpan from "../components/AnimatedTextSpan.svelte";
import { fadeInTransition } from "../animations/transitions";

// import GameProgress from "../components/GameProgress.svelte";
import { TokenURLs, AllTokens } from "../util/tokens";

import Image from "../components/Image.svelte";
import Random from "../util/Random";
import CardHint from "../components/CardHint.svelte";

function create_if_block(ctx) {
	let cardhint;
	let current;

	cardhint = new CardHint({
			props: {
				token: /*token*/ ctx[3],
				iconMode: /*iconMode*/ ctx[2],
				text: /*text*/ ctx[1]
			}
		});

	cardhint.$on("close", /*close_handler*/ ctx[6]);

	return {
		c() {
			create_component(cardhint.$$.fragment);
		},
		m(target, anchor) {
			mount_component(cardhint, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const cardhint_changes = {};
			if (dirty & /*token*/ 8) cardhint_changes.token = /*token*/ ctx[3];
			if (dirty & /*iconMode*/ 4) cardhint_changes.iconMode = /*iconMode*/ ctx[2];
			if (dirty & /*text*/ 2) cardhint_changes.text = /*text*/ ctx[1];
			cardhint.$set(cardhint_changes);
		},
		i(local) {
			if (current) return;
			transition_in(cardhint.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(cardhint.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(cardhint, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let div_intro;
	let div_outro;
	let current;
	let mounted;
	let dispose;
	let if_block = /*$canShow*/ ctx[4] && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			attr(div, "class", "container svelte-1lvhwzd");
			toggle_class(div, "ignorePointer", ignorePointer);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			current = true;

			if (!mounted) {
				dispose = listen(div, "introin", introin_handler);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*$canShow*/ ctx[4]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$canShow*/ 16) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (dirty & /*ignorePointer*/ 0) {
				toggle_class(div, "ignorePointer", ignorePointer);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);

			add_render_callback(() => {
				if (div_outro) div_outro.end(1);

				if (!div_intro) div_intro = create_in_transition(div, fadeInTransition, {
					// y: 20,
					delay: 0,
					duration: 1000
				});

				div_intro.start();
			});

			current = true;
		},
		o(local) {
			transition_out(if_block);
			if (div_intro) div_intro.invalidate();

			div_outro = create_out_transition(div, fadeInTransition, {
				// y: 0,
				delay: 0,
				duration: 1000
			});

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			if (detaching && div_outro) div_outro.end();
			mounted = false;
			dispose();
		}
	};
}

let ignorePointer = true;

const introin_handler = () => {
	
}; // ignorePointer = false;

function instance($$self, $$props, $$invalidate) {
	let $canShow,
		$$unsubscribe_canShow = noop,
		$$subscribe_canShow = () => ($$unsubscribe_canShow(), $$unsubscribe_canShow = subscribe(canShow, $$value => $$invalidate(4, $canShow = $$value)), canShow);

	$$self.$$.on_destroy.push(() => $$unsubscribe_canShow());
	const { entity } = context();
	const ref = entity.ref();
	let { canShow } = $$props;
	$$subscribe_canShow();
	let { text = "" } = $$props;
	let { iconMode = false } = $$props;
	let { token = "" } = $$props;

	onMount(() => {
		// ignorePointer = false;
		return () => {
			
		};
	});

	const close_handler = () => {
		// ignorePointer = true;
		ref.kill();
	};

	$$self.$$set = $$props => {
		if ("canShow" in $$props) $$subscribe_canShow($$invalidate(0, canShow = $$props.canShow));
		if ("text" in $$props) $$invalidate(1, text = $$props.text);
		if ("iconMode" in $$props) $$invalidate(2, iconMode = $$props.iconMode);
		if ("token" in $$props) $$invalidate(3, token = $$props.token);
	};

	return [canShow, text, iconMode, token, $canShow, ref, close_handler];
}

class TutorialMessage extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			canShow: 0,
			text: 1,
			iconMode: 2,
			token: 3
		});
	}
}

export default TutorialMessage;