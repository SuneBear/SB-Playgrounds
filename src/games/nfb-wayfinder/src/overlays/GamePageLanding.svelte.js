/* overlays/GamePageLanding.svelte generated by Svelte v3.31.0 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	create_in_transition,
	create_out_transition,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	space,
	text,
	toggle_class,
	transition_in,
	transition_out
} from "svelte/internal";

import ResumeIcon from "../assets/image/ui/ico_resume.png";
import ImageButton from "../components/ImageButton.svelte";
import Image from "../components/Image.svelte";

// import AboutIconEN from "../assets/image/ui/ico_about.png";
// import AboutIconFR from "../assets/image/ui/ico_about.png";
// import RestartIcon from "../assets/image/ui/ico_restart.png";
// import LanguageToggle from "../components/LanguageToggle.svelte";
import { sendAnalytics } from "../nfb";

import { get } from "svelte/store";

import {
	fadeTransition,
	fadeInTransition,
	fadeOpacityTransition,
	emptyTransition,
	transition
} from "../animations/transitions";

import { createEventDispatcher, onMount } from "svelte";
import { fade } from "svelte/transition";
import Assets from "../util/Assets";
import { audioState } from "../util/stores";
import { localize, language } from "../util/locale.js";
import { getVideo } from "../util/globalIntroVideo";
import { revealHeader, hideHeader } from "../nfb";
import { context } from "../alec-svelte";
import PoemTagButton from "../components/PoemTagButton.svelte";
import PoemCollectionOverlay from "./PoemCollectionOverlay.svelte";

function create_else_block_1(ctx) {
	let p0;
	let t0_value = /*$localize*/ ctx[9].introBlurbOne + "";
	let t0;
	let p0_intro;
	let t1;
	let p1;
	let t2_value = /*$localize*/ ctx[9].introBlurbTwo + "";
	let t2;
	let p1_intro;

	return {
		c() {
			p0 = element("p");
			t0 = text(t0_value);
			t1 = space();
			p1 = element("p");
			t2 = text(t2_value);
			attr(p0, "class", "svelte-h4m3ya");
			attr(p1, "class", "svelte-h4m3ya");
		},
		m(target, anchor) {
			insert(target, p0, anchor);
			append(p0, t0);
			insert(target, t1, anchor);
			insert(target, p1, anchor);
			append(p1, t2);
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*$localize*/ 512 && t0_value !== (t0_value = /*$localize*/ ctx[9].introBlurbOne + "")) set_data(t0, t0_value);
			if (dirty & /*$localize*/ 512 && t2_value !== (t2_value = /*$localize*/ ctx[9].introBlurbTwo + "")) set_data(t2, t2_value);
		},
		i(local) {
			if (!p0_intro) {
				add_render_callback(() => {
					p0_intro = create_in_transition(p0, fadeInTransition, {
						delay: /*contentDelay*/ ctx[11] + /*titleDelay*/ ctx[10],
						index: 1
					});

					p0_intro.start();
				});
			}

			if (!p1_intro) {
				add_render_callback(() => {
					p1_intro = create_in_transition(p1, fadeInTransition, {
						delay: /*contentDelay*/ ctx[11] + /*titleDelay*/ ctx[10],
						index: 2
					});

					p1_intro.start();
				});
			}
		},
		o: noop,
		d(detaching) {
			if (detaching) detach(p0);
			if (detaching) detach(t1);
			if (detaching) detach(p1);
		}
	};
}

// (174:8) {#if endState}
function create_if_block_3(ctx) {
	let t;
	let if_block1_anchor;
	let current;
	let if_block0 = /*endTextAVisible*/ ctx[4] && create_if_block_5(ctx);
	let if_block1 = /*endTextBVisible*/ ctx[5] && create_if_block_4(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, if_block1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*endTextAVisible*/ ctx[4]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*endTextAVisible*/ 16) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_5(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t.parentNode, t);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*endTextBVisible*/ ctx[5]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*endTextBVisible*/ 32) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_4(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(if_block1_anchor);
		}
	};
}

// (175:10) {#if endTextAVisible}
function create_if_block_5(ctx) {
	let div;
	let p0;
	let strong;
	let t0_value = /*$localize*/ ctx[9].endState0 + "";
	let t0;
	let t1;
	let p1;
	let t2_value = /*$localize*/ ctx[9].endState1 + "";
	let t2;
	let div_intro;
	let div_outro;
	let current;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			p0 = element("p");
			strong = element("strong");
			t0 = text(t0_value);
			t1 = space();
			p1 = element("p");
			t2 = text(t2_value);
			attr(p0, "class", "svelte-h4m3ya");
			attr(p1, "class", "svelte-h4m3ya");
			attr(div, "class", "paper-text");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, p0);
			append(p0, strong);
			append(strong, t0);
			append(div, t1);
			append(div, p1);
			append(p1, t2);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "introend", /*introend_handler*/ ctx[15]),
					listen(div, "outroend", /*outroend_handler*/ ctx[16])
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if ((!current || dirty & /*$localize*/ 512) && t0_value !== (t0_value = /*$localize*/ ctx[9].endState0 + "")) set_data(t0, t0_value);
			if ((!current || dirty & /*$localize*/ 512) && t2_value !== (t2_value = /*$localize*/ ctx[9].endState1 + "")) set_data(t2, t2_value);
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (div_outro) div_outro.end(1);

				if (!div_intro) div_intro = create_in_transition(div, fadeInTransition, {
					delay: /*titleDelay*/ ctx[10],
					duration: 500,
					index: 1
				});

				div_intro.start();
			});

			current = true;
		},
		o(local) {
			if (div_intro) div_intro.invalidate();

			div_outro = create_out_transition(div, fadeInTransition, {
				delay: /*titleDelay*/ ctx[10] + 5000,
				duration: 250
			});

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching && div_outro) div_outro.end();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (196:10) {#if endTextBVisible}
function create_if_block_4(ctx) {
	let div;
	let p;
	let raw_value = /*$localize*/ ctx[9].endState2 + "";
	let div_intro;

	return {
		c() {
			div = element("div");
			p = element("p");
			attr(p, "class", "svelte-h4m3ya");
			attr(div, "class", "paper-text");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, p);
			p.innerHTML = raw_value;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*$localize*/ 512 && raw_value !== (raw_value = /*$localize*/ ctx[9].endState2 + "")) p.innerHTML = raw_value;;
		},
		i(local) {
			if (!div_intro) {
				add_render_callback(() => {
					div_intro = create_in_transition(div, fadeInTransition, {
						delay: /*titleDelay*/ ctx[10],
						duration: 500,
						index: 1
					});

					div_intro.start();
				});
			}
		},
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (254:10) {:else}
function create_else_block(ctx) {
	let imagebutton;
	let current;

	imagebutton = new ImageButton({
			props: {
				inTransition: transition(fadeInTransition, {
					delay: /*contentDelay*/ ctx[11] + /*titleDelay*/ ctx[10],
					index: 3
				}),
				icon: ResumeIcon,
				text: /*$localize*/ ctx[9].resumeButton,
				alt: "Resume experience"
			}
		});

	imagebutton.$on("click", /*click_handler_2*/ ctx[19]);

	return {
		c() {
			create_component(imagebutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(imagebutton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const imagebutton_changes = {};
			if (dirty & /*$localize*/ 512) imagebutton_changes.text = /*$localize*/ ctx[9].resumeButton;
			imagebutton.$set(imagebutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(imagebutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(imagebutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(imagebutton, detaching);
		}
	};
}

// (243:26) 
function create_if_block_2(ctx) {
	let imagebutton;
	let current;

	imagebutton = new ImageButton({
			props: {
				inTransition: transition(fadeInTransition, {
					delay: /*contentDelay*/ ctx[11] + /*titleDelay*/ ctx[10],
					index: 3
				}),
				icon: ResumeIcon,
				text: /*$localize*/ ctx[9].startButton,
				alt: "Start experience"
			}
		});

	imagebutton.$on("click", /*click_handler_1*/ ctx[18]);

	return {
		c() {
			create_component(imagebutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(imagebutton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const imagebutton_changes = {};
			if (dirty & /*$localize*/ 512) imagebutton_changes.text = /*$localize*/ ctx[9].startButton;
			imagebutton.$set(imagebutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(imagebutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(imagebutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(imagebutton, detaching);
		}
	};
}

// (226:10) {#if endState}
function create_if_block_1(ctx) {
	let poemtagbutton;
	let current;

	poemtagbutton = new PoemTagButton({
			props: {
				useMargin: false,
				button: true,
				inTransition: transition(fadeInTransition, {
					delay: /*contentDelay*/ ctx[11] + /*titleDelay*/ ctx[10],
					index: 3
				}),
				alt: "Poems"
			}
		});

	poemtagbutton.$on("click", /*click_handler*/ ctx[17]);

	return {
		c() {
			create_component(poemtagbutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(poemtagbutton, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(poemtagbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(poemtagbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(poemtagbutton, detaching);
		}
	};
}

// (307:0) {#if isJournalOpen}
function create_if_block(ctx) {
	let poemcollectionoverlay;
	let current;

	poemcollectionoverlay = new PoemCollectionOverlay({
			props: { poems: /*poems*/ ctx[2], modal: true }
		});

	poemcollectionoverlay.$on("close", /*close_handler*/ ctx[23]);

	return {
		c() {
			create_component(poemcollectionoverlay.$$.fragment);
		},
		m(target, anchor) {
			mount_component(poemcollectionoverlay, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const poemcollectionoverlay_changes = {};
			if (dirty & /*poems*/ 4) poemcollectionoverlay_changes.poems = /*poems*/ ctx[2];
			poemcollectionoverlay.$set(poemcollectionoverlay_changes);
		},
		i(local) {
			if (current) return;
			transition_in(poemcollectionoverlay.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(poemcollectionoverlay.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(poemcollectionoverlay, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div10;
	let section0;
	let t2;
	let section1;
	let div9;
	let div4;
	let image;
	let div4_intro;
	let t3;
	let div5;
	let current_block_type_index;
	let if_block0;
	let t4;
	let div8;
	let div6;
	let current_block_type_index_1;
	let if_block1;
	let t5;
	let div7;
	let imagebutton;
	let div10_intro;
	let div10_outro;
	let t6;
	let if_block2_anchor;
	let current;
	let mounted;
	let dispose;

	image = new Image({
			props: {
				id: `image/ui/title2_${/*curLang*/ ctx[8]}`
			}
		});

	const if_block_creators = [create_if_block_3, create_else_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*endState*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const if_block_creators_1 = [create_if_block_1, create_if_block_2, create_else_block];
	const if_blocks_1 = [];

	function select_block_type_1(ctx, dirty) {
		if (/*endState*/ ctx[1]) return 0;
		if (/*start*/ ctx[0]) return 1;
		return 2;
	}

	current_block_type_index_1 = select_block_type_1(ctx, -1);
	if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);

	imagebutton = new ImageButton({
			props: {
				inTransition: transition(fadeInTransition, {
					delay: /*contentDelay*/ ctx[11] + /*titleDelay*/ ctx[10],
					index: 4
				}),
				text: /*$localize*/ ctx[9].aboutButton,
				mode: "dark",
				alt: "About"
			}
		});

	imagebutton.$on("click", /*click_handler_3*/ ctx[20]);
	let if_block2 = /*isJournalOpen*/ ctx[6] && create_if_block(ctx);

	return {
		c() {
			div10 = element("div");
			section0 = element("section");

			section0.innerHTML = `<div class="top-buttons svelte-h4m3ya"><div class="top-left-container svelte-h4m3ya"></div> 
      <div class="top-center-container"></div> 
      <div class="top-right-container svelte-h4m3ya"></div></div>`;

			t2 = space();
			section1 = element("section");
			div9 = element("div");
			div4 = element("div");
			create_component(image.$$.fragment);
			t3 = space();
			div5 = element("div");
			if_block0.c();
			t4 = space();
			div8 = element("div");
			div6 = element("div");
			if_block1.c();
			t5 = space();
			div7 = element("div");
			create_component(imagebutton.$$.fragment);
			t6 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
			attr(section0, "class", "top fake-nav svelte-h4m3ya");
			attr(div4, "class", "wayfinder-placeholder svelte-h4m3ya");
			toggle_class(div4, "ignorePointer", /*ignorePointer*/ ctx[7]);
			attr(div5, "class", "description-container svelte-h4m3ya");
			toggle_class(div5, "endState", /*endState*/ ctx[1]);
			attr(div6, "class", "game-buttons svelte-h4m3ya");
			attr(div7, "class", "about-container svelte-h4m3ya");
			attr(div8, "class", "button-container svelte-h4m3ya");
			attr(div9, "class", "wayfinder-container svelte-h4m3ya");
			attr(section1, "class", "main-content svelte-h4m3ya");
			attr(div10, "class", "container svelte-h4m3ya");
			toggle_class(div10, "ignorePointer", /*ignorePointer*/ ctx[7]);
		},
		m(target, anchor) {
			insert(target, div10, anchor);
			append(div10, section0);
			append(div10, t2);
			append(div10, section1);
			append(section1, div9);
			append(div9, div4);
			mount_component(image, div4, null);
			append(div9, t3);
			append(div9, div5);
			if_blocks[current_block_type_index].m(div5, null);
			append(div9, t4);
			append(div9, div8);
			append(div8, div6);
			if_blocks_1[current_block_type_index_1].m(div6, null);
			append(div8, t5);
			append(div8, div7);
			mount_component(imagebutton, div7, null);
			insert(target, t6, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, if_block2_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div10, "introstart", /*introstart_handler*/ ctx[21]),
					listen(div10, "outrostart", /*outrostart_handler*/ ctx[22])
				];

				mounted = true;
			}
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;
			const image_changes = {};
			if (dirty & /*curLang*/ 256) image_changes.id = `image/ui/title2_${/*curLang*/ ctx[8]}`;
			image.$set(image_changes);

			if (dirty & /*ignorePointer*/ 128) {
				toggle_class(div4, "ignorePointer", /*ignorePointer*/ ctx[7]);
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				} else {
					if_block0.p(ctx, dirty);
				}

				transition_in(if_block0, 1);
				if_block0.m(div5, null);
			}

			if (dirty & /*endState*/ 2) {
				toggle_class(div5, "endState", /*endState*/ ctx[1]);
			}

			let previous_block_index_1 = current_block_type_index_1;
			current_block_type_index_1 = select_block_type_1(ctx, dirty);

			if (current_block_type_index_1 === previous_block_index_1) {
				if_blocks_1[current_block_type_index_1].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
					if_blocks_1[previous_block_index_1] = null;
				});

				check_outros();
				if_block1 = if_blocks_1[current_block_type_index_1];

				if (!if_block1) {
					if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
					if_block1.c();
				} else {
					if_block1.p(ctx, dirty);
				}

				transition_in(if_block1, 1);
				if_block1.m(div6, null);
			}

			const imagebutton_changes = {};
			if (dirty & /*$localize*/ 512) imagebutton_changes.text = /*$localize*/ ctx[9].aboutButton;
			imagebutton.$set(imagebutton_changes);

			if (dirty & /*ignorePointer*/ 128) {
				toggle_class(div10, "ignorePointer", /*ignorePointer*/ ctx[7]);
			}

			if (/*isJournalOpen*/ ctx[6]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*isJournalOpen*/ 64) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(image.$$.fragment, local);

			if (!div4_intro) {
				add_render_callback(() => {
					div4_intro = create_in_transition(div4, fadeInTransition, {
						duration: /*introTitle*/ ctx[3] ? 2500 : undefined,
						delay: /*contentDelay*/ ctx[11]
					});

					div4_intro.start();
				});
			}

			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(imagebutton.$$.fragment, local);

			add_render_callback(() => {
				if (div10_outro) div10_outro.end(1);
				if (!div10_intro) div10_intro = create_in_transition(div10, fadeOpacityTransition, {});
				div10_intro.start();
			});

			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(image.$$.fragment, local);
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(imagebutton.$$.fragment, local);
			if (div10_intro) div10_intro.invalidate();

			div10_outro = create_out_transition(div10, fadeOpacityTransition, {
				duration: /*start*/ ctx[0] ? 1000 : undefined,
				delay: 0
			});

			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div10);
			destroy_component(image);
			if_blocks[current_block_type_index].d();
			if_blocks_1[current_block_type_index_1].d();
			destroy_component(imagebutton);
			if (detaching && div10_outro) div10_outro.end();
			if (detaching) detach(t6);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(if_block2_anchor);
			mounted = false;
			run_all(dispose);
		}
	};
}

function triggerFullscreen() {
	if (!document.fullscreenElement) {
		if (typeof document.documentElement.requestFullscreen === "function") {
			document.documentElement.requestFullscreen();
		}
	} else {
		if (document.exitFullscreen) {
			document.exitFullscreen();
		}
	}

	console.log("Fullscreen requested");
}

function triggerRestart() {
	console.log("restart requested");
}

function instance($$self, $$props, $$invalidate) {
	let $localize;
	component_subscribe($$self, localize, $$value => $$invalidate(9, $localize = $$value));
	const dispatcher = createEventDispatcher();
	let { start = true } = $$props;
	let { endState = false } = $$props;
	let { poems = [] } = $$props;
	let { introTitle = false } = $$props;
	let endTextAVisible = true;
	let endTextBVisible = false;
	let isJournalOpen = false;
	let ignorePointer = false;
	let curLang;

	const unsub = language.subscribe(lang => {
		$$invalidate(8, curLang = lang);
	});

	onMount(() => {
		revealHeader();
		$$invalidate(7, ignorePointer = false);

		return () => {
			unsub();
		};
	});

	let titleDelay = introTitle ? 1000 : 0;
	let contentDelay = endState ? 2500 : 0;
	let hasFullscreen = typeof document.documentElement.requestFullscreen === "function";

	function triggerResume(ev) {
		if (ev) {
			ev.preventDefault();
			ev.stopPropagation();
			ev.stopImmediatePropagation();
		}

		dispatcher("play");
	}

	function triggerPlay(ev) {
		if (ev) {
			ev.preventDefault();
			ev.stopPropagation();
			ev.stopImmediatePropagation();
		}

		dispatcher("play");
		const video = getVideo();
		const isMute = get(audioState).muted;
		video.muted = isMute;
		video.play();
	}

	function triggerAbout() {
		dispatcher("about");
	}

	const introend_handler = () => {
		$$invalidate(4, endTextAVisible = false);
	};

	const outroend_handler = () => {
		$$invalidate(5, endTextBVisible = true);
	};

	const click_handler = ev => {
		sendAnalytics({
			event: "journal_open",
			eventLabel: "journal_open"
		});

		$$invalidate(6, isJournalOpen = true);
	};

	const click_handler_1 = ev => triggerPlay(ev);
	const click_handler_2 = ev => triggerResume(ev);
	const click_handler_3 = () => triggerAbout();

	const introstart_handler = () => {
		$$invalidate(7, ignorePointer = false);
	};

	const outrostart_handler = () => {
		$$invalidate(7, ignorePointer = true);
	};

	const close_handler = () => {
		$$invalidate(6, isJournalOpen = false);
	};

	$$self.$$set = $$props => {
		if ("start" in $$props) $$invalidate(0, start = $$props.start);
		if ("endState" in $$props) $$invalidate(1, endState = $$props.endState);
		if ("poems" in $$props) $$invalidate(2, poems = $$props.poems);
		if ("introTitle" in $$props) $$invalidate(3, introTitle = $$props.introTitle);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*start*/ 1) {
			$: (start, $$invalidate(7, ignorePointer = false));
		}
	};

	return [
		start,
		endState,
		poems,
		introTitle,
		endTextAVisible,
		endTextBVisible,
		isJournalOpen,
		ignorePointer,
		curLang,
		$localize,
		titleDelay,
		contentDelay,
		triggerResume,
		triggerPlay,
		triggerAbout,
		introend_handler,
		outroend_handler,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		introstart_handler,
		outrostart_handler,
		close_handler
	];
}

class GamePageLanding extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			start: 0,
			endState: 1,
			poems: 2,
			introTitle: 3
		});
	}
}

export default GamePageLanding;