{"version":3,"sources":["maquette.js","../../../src/maquette.ts"],"names":["createDom","updateDom","NAMESPACE_W3","NAMESPACE_SVG","NAMESPACE_XLINK","emptyArray","extend","base","overrides","result","Object","keys","forEach","key","same","vnode1","vnode2","vnodeSelector","properties","bind","toTextVNode","data","undefined","children","text","toString","domNode","appendChildren","parentSelector","insertions","main","i","length_1","length","item","Array","isArray","hasOwnProperty","push","missingTransition","Error","DEFAULT_PROJECTION_OPTIONS","namespace","eventHandlerInterceptor","styleApplyer","styleName","value","style","transitions","enter","exit","applyDefaultProjectionOptions","projectorOptions","checkStyleValue","styleValue","setProperties","projectionOptions","propNames","propCount","_loop_1","propName","propValue","split","token","classList","add","classNames","classNameCount","j","className","styleNames","styleCount","type","lastIndexOf","oldPropValue","evt","target","apply","this","setAttributeNS","setAttribute","updateProperties","previousProperties","propertiesUpdated","previousValue","on","previousOn","remove","newStyleValue","oldStyleValue","findIndexOfChild","sameAs","start","nodeAdded","vNode","enterAnimation","nodeToRemove","exitAnimation","pointerEvents","removeDomNode","parentNode","removeChild","checkDistinguishable","childNodes","indexToCheck","parentVNode","operation","childNode","node","updateChildren","vnode","oldChildren","newChildren","oldChildrenLength","newChildrenLength","oldIndex","newIndex","textUpdated","oldChild","newChild","findOldIndex","addChildren","initPropertiesAndChildren","textContent","afterCreate","insertBefore","c","found","document","createTextNode","appendChild","charAt","slice","id","createElementNS","createElement","previous","updated","newVNode","replaceChild","firstChild","afterUpdate","updateAnimation","createProjection","update","updatedVnode","exports","h","selector","arguments","childIndex","argsLength","onlyChild","child","dom","create","append","beforeNode","merge","element","createCache","cachedInputs","cachedOutcome","invalidate","inputs","calculation","createMapping","getSourceKey","createResult","updateResult","results","map","newSources","newKeys","oldTargets","source","sourceKey","searchIndex","createProjector","projector","propertyName","eventHandler","scheduleRender","scheduled","renderCompleted","stopped","projections","renderFunctions","doRender","renderNow","requestAnimationFrame","stop","cancelAnimationFrame","resume","renderMaquetteFunction","replace","detach","splice"],"mappings":"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","file":"maquette.min.js","sourcesContent":["// Comment that is displayed in the API documentation for the maquette module:\n/**\n * Welcome to the API documentation of the **maquette** library.\n *\n * [[http://maquettejs.org/|To the maquette homepage]]\n */\n\"use strict\";\nvar NAMESPACE_W3 = 'http://www.w3.org/';\nvar NAMESPACE_SVG = NAMESPACE_W3 + '2000/svg';\nvar NAMESPACE_XLINK = NAMESPACE_W3 + '1999/xlink';\n// Utilities\nvar emptyArray = [];\nvar extend = function (base, overrides) {\n    var result = {};\n    Object.keys(base).forEach(function (key) {\n        result[key] = base[key];\n    });\n    if (overrides) {\n        Object.keys(overrides).forEach(function (key) {\n            result[key] = overrides[key];\n        });\n    }\n    return result;\n};\n// Hyperscript helper functions\nvar same = function (vnode1, vnode2) {\n    if (vnode1.vnodeSelector !== vnode2.vnodeSelector) {\n        return false;\n    }\n    if (vnode1.properties && vnode2.properties) {\n        if (vnode1.properties.key !== vnode2.properties.key) {\n            return false;\n        }\n        return vnode1.properties.bind === vnode2.properties.bind;\n    }\n    return !vnode1.properties && !vnode2.properties;\n};\nvar toTextVNode = function (data) {\n    return {\n        vnodeSelector: '',\n        properties: undefined,\n        children: undefined,\n        text: data.toString(),\n        domNode: null\n    };\n};\nvar appendChildren = function (parentSelector, insertions, main) {\n    for (var i = 0, length_1 = insertions.length; i < length_1; i++) {\n        var item = insertions[i];\n        if (Array.isArray(item)) {\n            appendChildren(parentSelector, item, main);\n        }\n        else {\n            if (item !== null && item !== undefined) {\n                if (!item.hasOwnProperty('vnodeSelector')) {\n                    item = toTextVNode(item);\n                }\n                main.push(item);\n            }\n        }\n    }\n};\n// Render helper functions\nvar missingTransition = function () {\n    throw new Error('Provide a transitions object to the projectionOptions to do animations');\n};\nvar DEFAULT_PROJECTION_OPTIONS = {\n    namespace: undefined,\n    eventHandlerInterceptor: undefined,\n    styleApplyer: function (domNode, styleName, value) {\n        // Provides a hook to add vendor prefixes for browsers that still need it.\n        domNode.style[styleName] = value;\n    },\n    transitions: {\n        enter: missingTransition,\n        exit: missingTransition\n    }\n};\nvar applyDefaultProjectionOptions = function (projectorOptions) {\n    return extend(DEFAULT_PROJECTION_OPTIONS, projectorOptions);\n};\nvar checkStyleValue = function (styleValue) {\n    if (typeof styleValue !== 'string') {\n        throw new Error('Style values must be strings');\n    }\n};\nvar setProperties = function (domNode, properties, projectionOptions) {\n    if (!properties) {\n        return;\n    }\n    var eventHandlerInterceptor = projectionOptions.eventHandlerInterceptor;\n    var propNames = Object.keys(properties);\n    var propCount = propNames.length;\n    var _loop_1 = function(i) {\n        var propName = propNames[i];\n        /* tslint:disable:no-var-keyword: edge case */\n        var propValue = properties[propName];\n        /* tslint:enable:no-var-keyword */\n        if (propName === 'className') {\n            throw new Error('Property \"className\" is not supported, use \"class\".');\n        }\n        else if (propName === 'class') {\n            propValue.split(/\\s+/).forEach(function (token) { return domNode.classList.add(token); });\n        }\n        else if (propName === 'classes') {\n            // object with string keys and boolean values\n            var classNames = Object.keys(propValue);\n            var classNameCount = classNames.length;\n            for (var j = 0; j < classNameCount; j++) {\n                var className = classNames[j];\n                if (propValue[className]) {\n                    domNode.classList.add(className);\n                }\n            }\n        }\n        else if (propName === 'styles') {\n            // object with string keys and string (!) values\n            var styleNames = Object.keys(propValue);\n            var styleCount = styleNames.length;\n            for (var j = 0; j < styleCount; j++) {\n                var styleName = styleNames[j];\n                var styleValue = propValue[styleName];\n                if (styleValue) {\n                    checkStyleValue(styleValue);\n                    projectionOptions.styleApplyer(domNode, styleName, styleValue);\n                }\n            }\n        }\n        else if (propName !== 'key' && propValue !== null && propValue !== undefined) {\n            var type = typeof propValue;\n            if (type === 'function') {\n                if (propName.lastIndexOf('on', 0) === 0) {\n                    if (eventHandlerInterceptor) {\n                        propValue = eventHandlerInterceptor(propName, propValue, domNode, properties); // intercept eventhandlers\n                    }\n                    if (propName === 'oninput') {\n                        (function () {\n                            // record the evt.target.value, because IE and Edge sometimes do a requestAnimationFrame between changing value and running oninput\n                            var oldPropValue = propValue;\n                            propValue = function (evt) {\n                                evt.target['oninput-value'] = evt.target.value; // may be HTMLTextAreaElement as well\n                                oldPropValue.apply(this, [evt]);\n                            };\n                        }());\n                    }\n                    domNode[propName] = propValue;\n                }\n            }\n            else if (type === 'string' && propName !== 'value' && propName !== 'innerHTML') {\n                if (projectionOptions.namespace === NAMESPACE_SVG && propName === 'href') {\n                    domNode.setAttributeNS(NAMESPACE_XLINK, propName, propValue);\n                }\n                else {\n                    domNode.setAttribute(propName, propValue);\n                }\n            }\n            else {\n                domNode[propName] = propValue;\n            }\n        }\n    };\n    for (var i = 0; i < propCount; i++) {\n        _loop_1(i);\n    }\n};\nvar updateProperties = function (domNode, previousProperties, properties, projectionOptions) {\n    if (!properties) {\n        return;\n    }\n    var propertiesUpdated = false;\n    var propNames = Object.keys(properties);\n    var propCount = propNames.length;\n    for (var i = 0; i < propCount; i++) {\n        var propName = propNames[i];\n        // assuming that properties will be nullified instead of missing is by design\n        var propValue = properties[propName];\n        var previousValue = previousProperties[propName];\n        if (propName === 'class') {\n            if (previousValue !== propValue) {\n                throw new Error('\"class\" property may not be updated. Use the \"classes\" property for conditional css classes.');\n            }\n        }\n        else if (propName === 'classes') {\n            var classList = domNode.classList;\n            var classNames = Object.keys(propValue);\n            var classNameCount = classNames.length;\n            for (var j = 0; j < classNameCount; j++) {\n                var className = classNames[j];\n                var on = !!propValue[className];\n                var previousOn = !!previousValue[className];\n                if (on === previousOn) {\n                    continue;\n                }\n                propertiesUpdated = true;\n                if (on) {\n                    classList.add(className);\n                }\n                else {\n                    classList.remove(className);\n                }\n            }\n        }\n        else if (propName === 'styles') {\n            var styleNames = Object.keys(propValue);\n            var styleCount = styleNames.length;\n            for (var j = 0; j < styleCount; j++) {\n                var styleName = styleNames[j];\n                var newStyleValue = propValue[styleName];\n                var oldStyleValue = previousValue[styleName];\n                if (newStyleValue === oldStyleValue) {\n                    continue;\n                }\n                propertiesUpdated = true;\n                if (newStyleValue) {\n                    checkStyleValue(newStyleValue);\n                    projectionOptions.styleApplyer(domNode, styleName, newStyleValue);\n                }\n                else {\n                    projectionOptions.styleApplyer(domNode, styleName, '');\n                }\n            }\n        }\n        else {\n            if (!propValue && typeof previousValue === 'string') {\n                propValue = '';\n            }\n            if (propName === 'value') {\n                if (domNode[propName] !== propValue && domNode['oninput-value'] !== propValue) {\n                    domNode[propName] = propValue; // Reset the value, even if the virtual DOM did not change\n                    domNode['oninput-value'] = undefined;\n                } // else do not update the domNode, otherwise the cursor position would be changed\n                if (propValue !== previousValue) {\n                    propertiesUpdated = true;\n                }\n            }\n            else if (propValue !== previousValue) {\n                var type = typeof propValue;\n                if (type === 'function') {\n                    throw new Error('Functions may not be updated on subsequent renders (property: ' + propName +\n                        '). Hint: declare event handler functions outside the render() function.');\n                }\n                if (type === 'string' && propName !== 'innerHTML') {\n                    if (projectionOptions.namespace === NAMESPACE_SVG && propName === 'href') {\n                        domNode.setAttributeNS(NAMESPACE_XLINK, propName, propValue);\n                    }\n                    else {\n                        domNode.setAttribute(propName, propValue);\n                    }\n                }\n                else {\n                    if (domNode[propName] !== propValue) {\n                        domNode[propName] = propValue;\n                    }\n                }\n                propertiesUpdated = true;\n            }\n        }\n    }\n    return propertiesUpdated;\n};\nvar findIndexOfChild = function (children, sameAs, start) {\n    if (sameAs.vnodeSelector !== '') {\n        // Never scan for text-nodes\n        for (var i = start; i < children.length; i++) {\n            if (same(children[i], sameAs)) {\n                return i;\n            }\n        }\n    }\n    return -1;\n};\nvar nodeAdded = function (vNode, transitions) {\n    if (vNode.properties) {\n        var enterAnimation = vNode.properties.enterAnimation;\n        if (enterAnimation) {\n            if (typeof enterAnimation === 'function') {\n                enterAnimation(vNode.domNode, vNode.properties);\n            }\n            else {\n                transitions.enter(vNode.domNode, vNode.properties, enterAnimation);\n            }\n        }\n    }\n};\nvar nodeToRemove = function (vNode, transitions) {\n    var domNode = vNode.domNode;\n    if (vNode.properties) {\n        var exitAnimation = vNode.properties.exitAnimation;\n        if (exitAnimation) {\n            domNode.style.pointerEvents = 'none';\n            var removeDomNode = function () {\n                if (domNode.parentNode) {\n                    domNode.parentNode.removeChild(domNode);\n                }\n            };\n            if (typeof exitAnimation === 'function') {\n                exitAnimation(domNode, removeDomNode, vNode.properties);\n                return;\n            }\n            else {\n                transitions.exit(vNode.domNode, vNode.properties, exitAnimation, removeDomNode);\n                return;\n            }\n        }\n    }\n    if (domNode.parentNode) {\n        domNode.parentNode.removeChild(domNode);\n    }\n};\nvar checkDistinguishable = function (childNodes, indexToCheck, parentVNode, operation) {\n    var childNode = childNodes[indexToCheck];\n    if (childNode.vnodeSelector === '') {\n        return; // Text nodes need not be distinguishable\n    }\n    var properties = childNode.properties;\n    var key = properties ? (properties.key === undefined ? properties.bind : properties.key) : undefined;\n    if (!key) {\n        for (var i = 0; i < childNodes.length; i++) {\n            if (i !== indexToCheck) {\n                var node = childNodes[i];\n                if (same(node, childNode)) {\n                    if (operation === 'added') {\n                        throw new Error(parentVNode.vnodeSelector + ' had a ' + childNode.vnodeSelector + ' child ' +\n                            'added, but there is now more than one. You must add unique key properties to make them distinguishable.');\n                    }\n                    else {\n                        throw new Error(parentVNode.vnodeSelector + ' had a ' + childNode.vnodeSelector + ' child ' +\n                            'removed, but there were more than one. You must add unique key properties to make them distinguishable.');\n                    }\n                }\n            }\n        }\n    }\n};\nvar createDom;\nvar updateDom;\nvar updateChildren = function (vnode, domNode, oldChildren, newChildren, projectionOptions) {\n    if (oldChildren === newChildren) {\n        return false;\n    }\n    oldChildren = oldChildren || emptyArray;\n    newChildren = newChildren || emptyArray;\n    var oldChildrenLength = oldChildren.length;\n    var newChildrenLength = newChildren.length;\n    var transitions = projectionOptions.transitions;\n    var oldIndex = 0;\n    var newIndex = 0;\n    var i;\n    var textUpdated = false;\n    while (newIndex < newChildrenLength) {\n        var oldChild = (oldIndex < oldChildrenLength) ? oldChildren[oldIndex] : undefined;\n        var newChild = newChildren[newIndex];\n        if (oldChild !== undefined && same(oldChild, newChild)) {\n            textUpdated = updateDom(oldChild, newChild, projectionOptions) || textUpdated;\n            oldIndex++;\n        }\n        else {\n            var findOldIndex = findIndexOfChild(oldChildren, newChild, oldIndex + 1);\n            if (findOldIndex >= 0) {\n                // Remove preceding missing children\n                for (i = oldIndex; i < findOldIndex; i++) {\n                    nodeToRemove(oldChildren[i], transitions);\n                    checkDistinguishable(oldChildren, i, vnode, 'removed');\n                }\n                textUpdated = updateDom(oldChildren[findOldIndex], newChild, projectionOptions) || textUpdated;\n                oldIndex = findOldIndex + 1;\n            }\n            else {\n                // New child\n                createDom(newChild, domNode, (oldIndex < oldChildrenLength) ? oldChildren[oldIndex].domNode : undefined, projectionOptions);\n                nodeAdded(newChild, transitions);\n                checkDistinguishable(newChildren, newIndex, vnode, 'added');\n            }\n        }\n        newIndex++;\n    }\n    if (oldChildrenLength > oldIndex) {\n        // Remove child fragments\n        for (i = oldIndex; i < oldChildrenLength; i++) {\n            nodeToRemove(oldChildren[i], transitions);\n            checkDistinguishable(oldChildren, i, vnode, 'removed');\n        }\n    }\n    return textUpdated;\n};\nvar addChildren = function (domNode, children, projectionOptions) {\n    if (!children) {\n        return;\n    }\n    for (var i = 0; i < children.length; i++) {\n        createDom(children[i], domNode, undefined, projectionOptions);\n    }\n};\nvar initPropertiesAndChildren = function (domNode, vnode, projectionOptions) {\n    addChildren(domNode, vnode.children, projectionOptions); // children before properties, needed for value property of <select>.\n    if (vnode.text) {\n        domNode.textContent = vnode.text;\n    }\n    setProperties(domNode, vnode.properties, projectionOptions);\n    if (vnode.properties && vnode.properties.afterCreate) {\n        vnode.properties.afterCreate.apply(vnode.properties.bind || vnode.properties, [domNode, projectionOptions, vnode.vnodeSelector, vnode.properties, vnode.children]);\n    }\n};\ncreateDom = function (vnode, parentNode, insertBefore, projectionOptions) {\n    var domNode, i, c, start = 0, type, found;\n    var vnodeSelector = vnode.vnodeSelector;\n    if (vnodeSelector === '') {\n        domNode = vnode.domNode = document.createTextNode(vnode.text);\n        if (insertBefore !== undefined) {\n            parentNode.insertBefore(domNode, insertBefore);\n        }\n        else {\n            parentNode.appendChild(domNode);\n        }\n    }\n    else {\n        for (i = 0; i <= vnodeSelector.length; ++i) {\n            c = vnodeSelector.charAt(i);\n            if (i === vnodeSelector.length || c === '.' || c === '#') {\n                type = vnodeSelector.charAt(start - 1);\n                found = vnodeSelector.slice(start, i);\n                if (type === '.') {\n                    domNode.classList.add(found);\n                }\n                else if (type === '#') {\n                    domNode.id = found;\n                }\n                else {\n                    if (found === 'svg') {\n                        projectionOptions = extend(projectionOptions, { namespace: NAMESPACE_SVG });\n                    }\n                    if (projectionOptions.namespace !== undefined) {\n                        domNode = vnode.domNode = document.createElementNS(projectionOptions.namespace, found);\n                    }\n                    else {\n                        domNode = vnode.domNode = document.createElement(found);\n                        if (found === 'input' && vnode.properties && vnode.properties.type !== undefined) {\n                            // IE8 and older don't support setting input type after the DOM Node has been added to the document\n                            domNode.setAttribute(\"type\", vnode.properties.type);\n                        }\n                    }\n                    if (insertBefore !== undefined) {\n                        parentNode.insertBefore(domNode, insertBefore);\n                    }\n                    else {\n                        parentNode.appendChild(domNode);\n                    }\n                }\n                start = i + 1;\n            }\n        }\n        initPropertiesAndChildren(domNode, vnode, projectionOptions);\n    }\n};\nupdateDom = function (previous, vnode, projectionOptions) {\n    var domNode = previous.domNode;\n    var textUpdated = false;\n    if (previous === vnode) {\n        return false; // By contract, VNode objects may not be modified anymore after passing them to maquette\n    }\n    var updated = false;\n    if (vnode.vnodeSelector === '') {\n        if (vnode.text !== previous.text) {\n            var newVNode = document.createTextNode(vnode.text);\n            domNode.parentNode.replaceChild(newVNode, domNode);\n            vnode.domNode = newVNode;\n            textUpdated = true;\n            return textUpdated;\n        }\n    }\n    else {\n        if (vnode.vnodeSelector.lastIndexOf('svg', 0) === 0) {\n            projectionOptions = extend(projectionOptions, { namespace: NAMESPACE_SVG });\n        }\n        if (previous.text !== vnode.text) {\n            updated = true;\n            if (vnode.text === undefined) {\n                domNode.removeChild(domNode.firstChild); // the only textnode presumably\n            }\n            else {\n                domNode.textContent = vnode.text;\n            }\n        }\n        updated = updateChildren(vnode, domNode, previous.children, vnode.children, projectionOptions) || updated;\n        updated = updateProperties(domNode, previous.properties, vnode.properties, projectionOptions) || updated;\n        if (vnode.properties && vnode.properties.afterUpdate) {\n            vnode.properties.afterUpdate.apply(vnode.properties.bind || vnode.properties, [domNode, projectionOptions, vnode.vnodeSelector, vnode.properties, vnode.children]);\n        }\n    }\n    if (updated && vnode.properties && vnode.properties.updateAnimation) {\n        vnode.properties.updateAnimation(domNode, vnode.properties, previous.properties);\n    }\n    vnode.domNode = previous.domNode;\n    return textUpdated;\n};\nvar createProjection = function (vnode, projectionOptions) {\n    return {\n        update: function (updatedVnode) {\n            if (vnode.vnodeSelector !== updatedVnode.vnodeSelector) {\n                throw new Error('The selector for the root VNode may not be changed. (consider using dom.merge and add one extra level to the virtual DOM)');\n            }\n            updateDom(vnode, updatedVnode, projectionOptions);\n            vnode = updatedVnode;\n        },\n        domNode: vnode.domNode\n    };\n};\n// The other two parameters are not added here, because the Typescript compiler creates surrogate code for destructuring 'children'.\nexports.h = function (selector) {\n    var properties = arguments[1];\n    if (typeof selector !== 'string') {\n        throw new Error();\n    }\n    var childIndex = 1;\n    if (properties && !properties.hasOwnProperty('vnodeSelector') && !Array.isArray(properties) && typeof properties === 'object') {\n        childIndex = 2;\n    }\n    else {\n        // Optional properties argument was omitted\n        properties = undefined;\n    }\n    var text;\n    var children;\n    var argsLength = arguments.length;\n    // Recognize a common special case where there is only a single text node\n    if (argsLength === childIndex + 1) {\n        var onlyChild = arguments[childIndex];\n        if (typeof onlyChild === 'string') {\n            text = onlyChild;\n        }\n        else if (onlyChild !== undefined && onlyChild !== null && onlyChild.length === 1 && typeof onlyChild[0] === 'string') {\n            text = onlyChild[0];\n        }\n    }\n    if (text === undefined) {\n        children = [];\n        for (; childIndex < argsLength; childIndex++) {\n            var child = arguments[childIndex];\n            if (child === null || child === undefined) {\n            }\n            else if (Array.isArray(child)) {\n                appendChildren(selector, child, children);\n            }\n            else if (child.hasOwnProperty('vnodeSelector')) {\n                children.push(child);\n            }\n            else {\n                children.push(toTextVNode(child));\n            }\n        }\n    }\n    return {\n        vnodeSelector: selector,\n        properties: properties,\n        children: children,\n        text: (text === '') ? undefined : text,\n        domNode: null\n    };\n};\n/**\n * Contains simple low-level utility functions to manipulate the real DOM.\n */\nexports.dom = {\n    /**\n     * Creates a real DOM tree from `vnode`. The [[Projection]] object returned will contain the resulting DOM Node in\n     * its [[Projection.domNode|domNode]] property.\n     * This is a low-level method. Users will typically use a [[Projector]] instead.\n     * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]]\n     * objects may only be rendered once.\n     * @param projectionOptions - Options to be used to create and update the projection.\n     * @returns The [[Projection]] which also contains the DOM Node that was created.\n     */\n    create: function (vnode, projectionOptions) {\n        projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n        createDom(vnode, document.createElement('div'), undefined, projectionOptions);\n        return createProjection(vnode, projectionOptions);\n    },\n    /**\n     * Appends a new childnode to the DOM which is generated from a [[VNode]].\n     * This is a low-level method. Users will typically use a [[Projector]] instead.\n     * @param parentNode - The parent node for the new childNode.\n     * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]]\n     * objects may only be rendered once.\n     * @param projectionOptions - Options to be used to create and update the [[Projection]].\n     * @returns The [[Projection]] that was created.\n     */\n    append: function (parentNode, vnode, projectionOptions) {\n        projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n        createDom(vnode, parentNode, undefined, projectionOptions);\n        return createProjection(vnode, projectionOptions);\n    },\n    /**\n     * Inserts a new DOM node which is generated from a [[VNode]].\n     * This is a low-level method. Users wil typically use a [[Projector]] instead.\n     * @param beforeNode - The node that the DOM Node is inserted before.\n     * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function.\n     * NOTE: [[VNode]] objects may only be rendered once.\n     * @param projectionOptions - Options to be used to create and update the projection, see [[createProjector]].\n     * @returns The [[Projection]] that was created.\n     */\n    insertBefore: function (beforeNode, vnode, projectionOptions) {\n        projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n        createDom(vnode, beforeNode.parentNode, beforeNode, projectionOptions);\n        return createProjection(vnode, projectionOptions);\n    },\n    /**\n     * Merges a new DOM node which is generated from a [[VNode]] with an existing DOM Node.\n     * This means that the virtual DOM and the real DOM will have one overlapping element.\n     * Therefore the selector for the root [[VNode]] will be ignored, but its properties and children will be applied to the Element provided.\n     * This is a low-level method. Users wil typically use a [[Projector]] instead.\n     * @param element - The existing element to adopt as the root of the new virtual DOM. Existing attributes and childnodes are preserved.\n     * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]] objects\n     * may only be rendered once.\n     * @param projectionOptions - Options to be used to create and update the projection, see [[createProjector]].\n     * @returns The [[Projection]] that was created.\n     */\n    merge: function (element, vnode, projectionOptions) {\n        projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n        vnode.domNode = element;\n        initPropertiesAndChildren(element, vnode, projectionOptions);\n        return createProjection(vnode, projectionOptions);\n    }\n};\n/**\n * Creates a [[CalculationCache]] object, useful for caching [[VNode]] trees.\n * In practice, caching of [[VNode]] trees is not needed, because achieving 60 frames per second is almost never a problem.\n * For more information, see [[CalculationCache]].\n *\n * @param <Result> The type of the value that is cached.\n */\nexports.createCache = function () {\n    var cachedInputs;\n    var cachedOutcome;\n    return {\n        invalidate: function () {\n            cachedOutcome = undefined;\n            cachedInputs = undefined;\n        },\n        result: function (inputs, calculation) {\n            if (cachedInputs) {\n                for (var i = 0; i < inputs.length; i++) {\n                    if (cachedInputs[i] !== inputs[i]) {\n                        cachedOutcome = undefined;\n                    }\n                }\n            }\n            if (!cachedOutcome) {\n                cachedOutcome = calculation();\n                cachedInputs = inputs;\n            }\n            return cachedOutcome;\n        }\n    };\n};\n/**\n * Creates a {@link Mapping} instance that keeps an array of result objects synchronized with an array of source objects.\n * See {@link http://maquettejs.org/docs/arrays.html|Working with arrays}.\n *\n * @param <Source>       The type of source items. A database-record for instance.\n * @param <Target>       The type of target items. A [[Component]] for instance.\n * @param getSourceKey   `function(source)` that must return a key to identify each source object. The result must either be a string or a number.\n * @param createResult   `function(source, index)` that must create a new result object from a given source. This function is identical\n *                       to the `callback` argument in `Array.map(callback)`.\n * @param updateResult   `function(source, target, index)` that updates a result to an updated source.\n */\nexports.createMapping = function (getSourceKey, createResult, updateResult) {\n    var keys = [];\n    var results = [];\n    return {\n        results: results,\n        map: function (newSources) {\n            var newKeys = newSources.map(getSourceKey);\n            var oldTargets = results.slice();\n            var oldIndex = 0;\n            for (var i = 0; i < newSources.length; i++) {\n                var source = newSources[i];\n                var sourceKey = newKeys[i];\n                if (sourceKey === keys[oldIndex]) {\n                    results[i] = oldTargets[oldIndex];\n                    updateResult(source, oldTargets[oldIndex], i);\n                    oldIndex++;\n                }\n                else {\n                    var found = false;\n                    for (var j = 1; j < keys.length + 1; j++) {\n                        var searchIndex = (oldIndex + j) % keys.length;\n                        if (keys[searchIndex] === sourceKey) {\n                            results[i] = oldTargets[searchIndex];\n                            updateResult(newSources[i], oldTargets[searchIndex], i);\n                            oldIndex = searchIndex + 1;\n                            found = true;\n                            break;\n                        }\n                    }\n                    if (!found) {\n                        results[i] = createResult(source, i);\n                    }\n                }\n            }\n            results.length = newSources.length;\n            keys = newKeys;\n        }\n    };\n};\n/**\n * Creates a [[Projector]] instance using the provided projectionOptions.\n *\n * For more information, see [[Projector]].\n *\n * @param projectorOptions   Options that influence how the DOM is rendered and updated.\n */\nexports.createProjector = function (projectorOptions) {\n    var projector;\n    var projectionOptions = applyDefaultProjectionOptions(projectorOptions);\n    projectionOptions.eventHandlerInterceptor = function (propertyName, eventHandler, domNode, properties) {\n        return function () {\n            // intercept function calls (event handlers) to do a render afterwards.\n            projector.scheduleRender();\n            return eventHandler.apply(properties.bind || this, arguments);\n        };\n    };\n    var renderCompleted = true;\n    var scheduled;\n    var stopped = false;\n    var projections = [];\n    var renderFunctions = []; // matches the projections array\n    var doRender = function () {\n        scheduled = undefined;\n        if (!renderCompleted) {\n            return; // The last render threw an error, it should be logged in the browser console.\n        }\n        renderCompleted = false;\n        for (var i = 0; i < projections.length; i++) {\n            var updatedVnode = renderFunctions[i]();\n            projections[i].update(updatedVnode);\n        }\n        renderCompleted = true;\n    };\n    projector = {\n        renderNow: doRender,\n        scheduleRender: function () {\n            if (!scheduled && !stopped) {\n                scheduled = requestAnimationFrame(doRender);\n            }\n        },\n        stop: function () {\n            if (scheduled) {\n                cancelAnimationFrame(scheduled);\n                scheduled = undefined;\n            }\n            stopped = true;\n        },\n        resume: function () {\n            stopped = false;\n            renderCompleted = true;\n            projector.scheduleRender();\n        },\n        append: function (parentNode, renderMaquetteFunction) {\n            projections.push(exports.dom.append(parentNode, renderMaquetteFunction(), projectionOptions));\n            renderFunctions.push(renderMaquetteFunction);\n        },\n        insertBefore: function (beforeNode, renderMaquetteFunction) {\n            projections.push(exports.dom.insertBefore(beforeNode, renderMaquetteFunction(), projectionOptions));\n            renderFunctions.push(renderMaquetteFunction);\n        },\n        merge: function (domNode, renderMaquetteFunction) {\n            projections.push(exports.dom.merge(domNode, renderMaquetteFunction(), projectionOptions));\n            renderFunctions.push(renderMaquetteFunction);\n        },\n        replace: function (domNode, renderMaquetteFunction) {\n            var vnode = renderMaquetteFunction();\n            createDom(vnode, domNode.parentNode, domNode, projectionOptions);\n            domNode.parentNode.removeChild(domNode);\n            projections.push(createProjection(vnode, projectionOptions));\n            renderFunctions.push(renderMaquetteFunction);\n        },\n        detach: function (renderMaquetteFunction) {\n            for (var i = 0; i < renderFunctions.length; i++) {\n                if (renderFunctions[i] === renderMaquetteFunction) {\n                    renderFunctions.splice(i, 1);\n                    return projections.splice(i, 1)[0];\n                }\n            }\n            throw new Error('renderMaquetteFunction was not found');\n        }\n    };\n    return projector;\n};\n\n//# sourceMappingURL=maquette.js.map\n","// Comment that is displayed in the API documentation for the maquette module:\r\n/**\r\n * Welcome to the API documentation of the **maquette** library.\r\n *\r\n * [[http://maquettejs.org/|To the maquette homepage]]\r\n */\r\n\r\n/**\r\n * A virtual representation of a DOM Node. Maquette assumes that [[VNode]] objects are never modified externally.\r\n * Instances of [[VNode]] can be created using [[h]].\r\n */\r\nexport interface VNode {\r\n  /**\r\n   * The CSS selector containing tagname, css classnames and id. An empty string is used to denote a text node.\r\n   */\r\n  readonly vnodeSelector: string;\r\n  /**\r\n   * Object containing attributes, properties, event handlers and more, see [[h]].\r\n   */\r\n  readonly properties: VNodeProperties | undefined;\r\n  /**\r\n   * Array of [[VNode]]s to be used as children. This array is already flattened.\r\n   */\r\n  readonly children: Array<VNode> | undefined;\r\n  /**\r\n   * Used in a special case when a [[VNode]] only has one childnode which is a textnode. Only used in combination with children === undefined.\r\n   */\r\n  readonly text: string | undefined;\r\n  /**\r\n   * Used by maquette to store the domNode that was produced from this [[VNode]].\r\n   */\r\n  domNode: Node | null;\r\n}\r\n\r\n/**\r\n * A projector is used to create the real DOM from the the virtual DOM and to keep it up-to-date afterwards.\r\n *\r\n * You can call [[append]], [[merge]], [[insertBefore]] and [[replace]] to add the virtual DOM to the real DOM.\r\n * The `renderMaquetteFunction` callbacks will be called to create the real DOM immediately.\r\n * Afterwards, the `renderMaquetteFunction` callbacks will be called again to update the DOM on the next animation-frame after:\r\n *\r\n *  - The Projector's [[scheduleRender]] function  was called\r\n *  - An event handler (like `onclick`) on a rendered [[VNode]] was called.\r\n *\r\n * The projector stops when [[stop]] is called or when an error is thrown during rendering.\r\n * It is possible to use `window.onerror` to handle these errors.\r\n * Instances of [[Projector]] can be created using [[createProjector]].\r\n */\r\nexport interface Projector {\r\n  /**\r\n   * Appends a new childnode to the DOM using the result from the provided `renderMaquetteFunction`.\r\n   * The `renderMaquetteFunction` will be invoked again to update the DOM when needed.\r\n   * @param parentNode - The parent node for the new childNode.\r\n   * @param renderMaquetteFunction - Function with zero arguments that returns a [[VNode]] tree.\r\n   */\r\n  append(parentNode: Element, renderMaquetteFunction: () => VNode): void;\r\n  /**\r\n   * Inserts a new DOM node using the result from the provided `renderMaquetteFunction`.\r\n   * The `renderMaquetteFunction` will be invoked again to update the DOM when needed.\r\n   * @param beforeNode - The node that the DOM Node is inserted before.\r\n   * @param renderMaquetteFunction - Function with zero arguments that returns a [[VNode]] tree.\r\n   */\r\n  insertBefore(beforeNode: Element, renderMaquetteFunction: () => VNode): void;\r\n  /**\r\n   * Merges a new DOM node using the result from the provided `renderMaquetteFunction` with an existing DOM Node.\r\n   * This means that the virtual DOM and real DOM have one overlapping element.\r\n   * Therefore the selector for the root [[VNode]] will be ignored, but its properties and children will be applied to the Element provided\r\n   * The `renderMaquetteFunction` will be invoked again to update the DOM when needed.\r\n   * @param domNode - The existing element to adopt as the root of the new virtual DOM. Existing attributes and childnodes are preserved.\r\n   * @param renderMaquetteFunction - Function with zero arguments that returns a [[VNode]] tree.\r\n   */\r\n  merge(domNode: Element, renderMaquetteFunction: () => VNode): void;\r\n  /**\r\n   * Replaces an existing DOM node with the result from the provided `renderMaquetteFunction`.\r\n   * The `renderMaquetteFunction` will be invoked again to update the DOM when needed.\r\n   * @param domNode - The DOM node to replace.\r\n   * @param renderMaquetteFunction - Function with zero arguments that returns a [[VNode]] tree.\r\n   */\r\n  replace(domNode: Element, renderMaquetteFunction: () => VNode): void;\r\n  /**\r\n   * Resumes the projector. Use this method to resume rendering after [[stop]] was called or an error occurred during rendering.\r\n   */\r\n  resume(): void;\r\n  /**\r\n   * Instructs the projector to re-render to the DOM at the next animation-frame using the registered `renderMaquette` functions.\r\n   * This method is automatically called for you when event-handlers that are registered in the [[VNode]]s are invoked.\r\n   *\r\n   * You need to call this method when timeouts expire, when AJAX responses arrive or other asynchronous actions happen.\r\n   */\r\n  scheduleRender(): void;\r\n  /**\r\n   * Synchronously re-renders to the DOM. You should normally call the `scheduleRender()` function to keep the\r\n   * user interface more performant. There is however one good reason to call renderNow(),\r\n   * when you want to put the focus into a newly created element in iOS.\r\n   * This is only allowed when triggered by a user-event, not during requestAnimationFrame.\r\n   */\r\n  renderNow(): void;\r\n  /**\r\n   * Stops running the `renderMaquetteFunction` to update the DOM. The `renderMaquetteFunction` must have been\r\n   * registered using [[append]], [[merge]], [[insertBefore]] or [[replace]].\r\n   *\r\n   * @returns The [[Projection]] which was created using this `renderMaquetteFunction`.\r\n   * The [[Projection]] contains a reference to the DOM Node that was rendered.\r\n   */\r\n  detach(renderMaquetteFunction: () => VNode): Projection;\r\n  /**\r\n   * Stops the projector. This means that the registered `renderMaquette` functions will not be called anymore.\r\n   *\r\n   * Note that calling [[stop]] is not mandatory. A projector is a passive object that will get garbage collected\r\n   * as usual if it is no longer in scope.\r\n   */\r\n  stop(): void;\r\n}\r\n\r\n/**\r\n * These functions are called when [[VNodeProperties.enterAnimation]] and [[VNodeProperties.exitAnimation]] are provided as strings.\r\n * See [[ProjectionOptions.transitions]].\r\n */\r\nexport interface TransitionStrategy {\r\n  /**\r\n   * Function that is called when a [[VNode]] with an `enterAnimation` string is added to an already existing parent [[VNode]].\r\n   *\r\n   * @param element         Element that was just added to the DOM.\r\n   * @param properties      The properties object that was supplied to the [[h]] method\r\n   * @param enterAnimation  The string that was passed to [[VNodeProperties.enterAnimation]].\r\n   */\r\n  enter(element: Element, properties: VNodeProperties, enterAnimation: string): void;\r\n  /**\r\n   * Function that is called when a [[VNode]] with an `exitAnimation` string is removed from a existing parent [[VNode]] that remains.\r\n   *\r\n   * @param element         Element that ought to be removed from to the DOM.\r\n   * @param properties      The properties object that was supplied to the [[h]] method that rendered this [[VNode]] the previous time.\r\n   * @param exitAnimation   The string that was passed to [[VNodeProperties.exitAnimation]].\r\n   * @param removeElement   Function that removes the element from the DOM.\r\n   *                        This argument is provided purely for convenience.\r\n   *                        You may use this function to remove the element when the animation is done.\r\n   */\r\n  exit(element: Element, properties: VNodeProperties, exitAnimation: string, removeElement: () => void): void;\r\n}\r\n\r\n/**\r\n * Options that may be passed when creating the [[Projector]]\r\n */\r\nexport interface ProjectorOptions {\r\n  /**\r\n   * A transition strategy to invoke when enterAnimation and exitAnimation properties are provided as strings.\r\n   * The module `cssTransitions` in the provided `css-transitions.js` file provides such a strategy.\r\n   * A transition strategy is not needed when enterAnimation and exitAnimation properties are provided as functions.\r\n   */\r\n  readonly transitions?: TransitionStrategy;\r\n  /**\r\n   * May be used to add vendor prefixes when applying inline styles when needed.\r\n   * This function is called when [[styles]] is used.\r\n   * This function should execute `domNode.style[styleName] = value` or do something smarter.\r\n   *\r\n   * @param domNode   The DOM Node that needs to receive the style\r\n   * @param styleName The name of the style that should be applied, for example `transform`.\r\n   * @param value     The value of this style, for example `rotate(45deg)`.\r\n   */\r\n  styleApplyer?(domNode: HTMLElement, styleName: string, value: string): void;\r\n}\r\n\r\n/**\r\n * Options that influence how the DOM is rendered and updated.\r\n */\r\nexport interface ProjectionOptions extends ProjectorOptions {\r\n  /**\r\n   * Only for internal use. Used for rendering SVG Nodes.\r\n   */\r\n  readonly namespace?: string;\r\n  /**\r\n   * May be used to intercept registration of event-handlers.\r\n   *\r\n   * Used by the [[Projector]] to wrap eventHandler-calls to call [[scheduleRender]] as well.\r\n   *\r\n   * @param propertyName             The name of the property to be assigned, for example onclick\r\n   * @param eventHandler             The function that was registered on the [[VNode]]\r\n   * @param domNode                  The real DOM element\r\n   * @param properties               The whole set of properties that was put on the VNode\r\n   * @returns                        The function that is to be placed on the DOM node as the event handler, instead of `eventHandler`.\r\n   */\r\n  eventHandlerInterceptor?: (propertyName: string, eventHandler: Function, domNode: Node, properties: VNodeProperties) => Function;\r\n}\r\n\r\n/**\r\n * Object containing attributes, properties, event handlers and more that can be put on DOM nodes.\r\n *\r\n * For your convenience, all common attributes, properties and event handlers are listed here and are\r\n * type-checked when using Typescript.\r\n */\r\nexport interface VNodeProperties {\r\n  /**\r\n   * The animation to perform when this node is added to an already existing parent.\r\n   * When this value is a string, you must pass a `projectionOptions.transitions` object when creating the\r\n   * projector using [[createProjector]].\r\n   * {@link http://maquettejs.org/docs/animations.html|More about animations}.\r\n   * @param element - Element that was just added to the DOM.\r\n   * @param properties - The properties object that was supplied to the [[h]] method\r\n   */\r\n  enterAnimation?: ((element: Element, properties?: VNodeProperties) => void) | string;\r\n  /**\r\n   * The animation to perform when this node is removed while its parent remains.\r\n   * When this value is a string, you must pass a `projectionOptions.transitions` object when creating the projector using [[createProjector]].\r\n   * {@link http://maquettejs.org/docs/animations.html|More about animations}.\r\n   * @param element - Element that ought to be removed from to the DOM.\r\n   * @param removeElement - Function that removes the element from the DOM.\r\n   * This argument is provided purely for convenience.\r\n   * You may use this function to remove the element when the animation is done.\r\n   * @param properties - The properties object that was supplied to the [[h]] method that rendered this [[VNode]] the previous time.\r\n   */\r\n  exitAnimation?: ((element: Element, removeElement: () => void, properties?: VNodeProperties) => void) | string;\r\n  /**\r\n   * The animation to perform when the properties of this node change.\r\n   * This also includes attributes, styles, css classes. This callback is also invoked when node contains only text and that text changes.\r\n   * {@link http://maquettejs.org/docs/animations.html|More about animations}.\r\n   * @param element - Element that was modified in the DOM.\r\n   * @param properties - The last properties object that was supplied to the [[h]] method\r\n   * @param previousProperties - The previous properties object that was supplied to the [[h]] method\r\n   */\r\n  updateAnimation?: (element: Element, properties?: VNodeProperties, previousProperties?: VNodeProperties) => void;\r\n  /**\r\n   * Callback that is executed after this node is added to the DOM. Childnodes and properties have\r\n   * already been applied.\r\n   * @param element - The element that was added to the DOM.\r\n   * @param projectionOptions - The projection options that were used see [[createProjector]].\r\n   * @param vnodeSelector - The selector passed to the [[h]] function.\r\n   * @param properties - The properties passed to the [[h]] function.\r\n   * @param children - The children that were created.\r\n   */\r\n  afterCreate?(element: Element, projectionOptions: ProjectionOptions, vnodeSelector: string, properties: VNodeProperties,\r\n    children: VNode[]): void;\r\n  /**\r\n   * Callback that is executed every time this node may have been updated. Childnodes and properties\r\n   * have already been updated.\r\n   * @param element - The element that may have been updated in the DOM.\r\n   * @param projectionOptions - The projection options that were used see [[createProjector]].\r\n   * @param vnodeSelector - The selector passed to the [[h]] function.\r\n   * @param properties - The properties passed to the [[h]] function.\r\n   * @param children - The children for this node.\r\n   */\r\n  afterUpdate?(element: Element, projectionOptions: ProjectionOptions, vnodeSelector: string, properties: VNodeProperties,\r\n    children: VNode[]): void;\r\n  /**\r\n   * When specified, the event handlers will be invoked with 'this' pointing to the value.\r\n   * This is useful when using the prototype/class based implementation of Components.\r\n   *\r\n   * When no [[key]] is present, this object is also used to uniquely identify a DOM node.\r\n   */\r\n  readonly bind?: Object;\r\n  /**\r\n   * Used to uniquely identify a DOM node among siblings.\r\n   * A key is required when there are more children with the same selector and these children are added or removed dynamically.\r\n   * NOTE: this does not have to be a string or number, a [[Component]] Object for instance is also possible.\r\n   */\r\n  readonly key?: Object;\r\n  /**\r\n   * An object literal like `{important:true}` which allows css classes, like `important` to be added and removed\r\n   * dynamically.\r\n   */\r\n  readonly classes?: { [index: string]: boolean | null | undefined };\r\n  /**\r\n   * An object literal like `{height:'100px'}` which allows styles to be changed dynamically. All values must be strings.\r\n   */\r\n  readonly styles?: { [index: string]: string | null | undefined };\r\n\r\n  // From Element\r\n  ontouchcancel?(ev?: TouchEvent): boolean | void;\r\n  ontouchend?(ev?: TouchEvent): boolean | void;\r\n  ontouchmove?(ev?: TouchEvent): boolean | void;\r\n  ontouchstart?(ev?: TouchEvent): boolean | void;\r\n  // From HTMLFormElement\r\n  readonly action?: string;\r\n  readonly encoding?: string;\r\n  readonly enctype?: string;\r\n  readonly method?: string;\r\n  readonly name?: string;\r\n  readonly target?: string;\r\n  // From HTMLAnchorElement\r\n  readonly href?: string;\r\n  readonly rel?: string;\r\n  // From HTMLElement\r\n  onblur?(ev?: FocusEvent): boolean | void;\r\n  onchange?(ev?: Event): boolean | void;\r\n  onclick?(ev?: MouseEvent): boolean | void;\r\n  ondblclick?(ev?: MouseEvent): boolean | void;\r\n  onfocus?(ev?: FocusEvent): boolean | void;\r\n  oninput?(ev?: Event): boolean | void;\r\n  onkeydown?(ev?: KeyboardEvent): boolean | void;\r\n  onkeypress?(ev?: KeyboardEvent): boolean | void;\r\n  onkeyup?(ev?: KeyboardEvent): boolean | void;\r\n  onload?(ev?: Event): boolean | void;\r\n  onmousedown?(ev?: MouseEvent): boolean | void;\r\n  onmouseenter?(ev?: MouseEvent): boolean | void;\r\n  onmouseleave?(ev?: MouseEvent): boolean | void;\r\n  onmousemove?(ev?: MouseEvent): boolean | void;\r\n  onmouseout?(ev?: MouseEvent): boolean | void;\r\n  onmouseover?(ev?: MouseEvent): boolean | void;\r\n  onmouseup?(ev?: MouseEvent): boolean | void;\r\n  onmousewheel?(ev?: WheelEvent | MouseWheelEvent): boolean | void;\r\n  onscroll?(ev?: UIEvent): boolean | void;\r\n  onsubmit?(ev?: Event): boolean | void;\r\n  readonly spellcheck?: boolean;\r\n  readonly tabIndex?: number;\r\n  readonly disabled?: boolean;\r\n  readonly title?: string;\r\n  readonly accessKey?: string;\r\n  readonly id?: string;\r\n  // From HTMLInputElement\r\n  readonly type?: string;\r\n  readonly autocomplete?: string;\r\n  readonly checked?: boolean;\r\n  readonly placeholder?: string;\r\n  readonly readOnly?: boolean;\r\n  readonly src?: string;\r\n  readonly value?: string;\r\n  // From HTMLImageElement\r\n  readonly alt?: string;\r\n  readonly srcset?: string;\r\n  /**\r\n   * Puts a non-interactive piece of html inside the DOM node.\r\n   *\r\n   * Note: if you use innerHTML, maquette cannot protect you from XSS vulnerabilities and you must make sure that the innerHTML value is safe.\r\n   */\r\n  readonly innerHTML?: string;\r\n\r\n  /**\r\n   * Everything that is not explicitly listed (properties and attributes that are either uncommon or custom).\r\n   */\r\n  readonly [index: string]: any;\r\n}\r\n\r\n/**\r\n * Represents a [[VNode]] tree that has been rendered to a real DOM tree.\r\n */\r\nexport interface Projection {\r\n  /**\r\n   * The DOM node that is used as the root of this [[Projection]].\r\n   */\r\n  readonly domNode: Element;\r\n  /**\r\n   * Updates the real DOM to match the new virtual DOM tree.\r\n   * @param updatedVnode The updated virtual DOM tree. Note: The selector for the root of the [[VNode]] tree may not change.\r\n   */\r\n  update(updatedVnode: VNode): void;\r\n}\r\n\r\nconst NAMESPACE_W3 = 'http://www.w3.org/';\r\nconst NAMESPACE_SVG = NAMESPACE_W3 + '2000/svg';\r\nconst NAMESPACE_XLINK = NAMESPACE_W3 + '1999/xlink';\r\n\r\n// Utilities\r\n\r\nlet emptyArray = <VNode[]>[];\r\n\r\nlet extend = <T>(base: T, overrides: any): T => {\r\n  let result = {} as any;\r\n  Object.keys(base).forEach(function(key) {\r\n    result[key] = (base as any)[key];\r\n  });\r\n  if (overrides) {\r\n    Object.keys(overrides).forEach((key) => {\r\n      result[key] = overrides[key];\r\n    });\r\n  }\r\n  return result;\r\n};\r\n\r\n// Hyperscript helper functions\r\n\r\nlet same = (vnode1: VNode, vnode2: VNode) => {\r\n  if (vnode1.vnodeSelector !== vnode2.vnodeSelector) {\r\n    return false;\r\n  }\r\n  if (vnode1.properties && vnode2.properties) {\r\n    if (vnode1.properties.key !== vnode2.properties.key) {\r\n      return false;\r\n    }\r\n    return vnode1.properties.bind === vnode2.properties.bind;\r\n  }\r\n  return !vnode1.properties && !vnode2.properties;\r\n};\r\n\r\nlet toTextVNode = (data: any): VNode => {\r\n  return {\r\n    vnodeSelector: '',\r\n    properties: undefined,\r\n    children: undefined,\r\n    text: data.toString(),\r\n    domNode: null\r\n  };\r\n};\r\n\r\nlet appendChildren = function(parentSelector: string, insertions: any[], main: VNode[]) {\r\n  for (let i = 0, length = insertions.length; i < length; i++) {\r\n    let item = insertions[i];\r\n    if (Array.isArray(item)) {\r\n      appendChildren(parentSelector, item, main);\r\n    } else {\r\n      if (item !== null && item !== undefined) {\r\n        if (!item.hasOwnProperty('vnodeSelector')) {\r\n          item = toTextVNode(item);\r\n        }\r\n        main.push(item);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// Render helper functions\r\n\r\nlet missingTransition = function() {\r\n  throw new Error('Provide a transitions object to the projectionOptions to do animations');\r\n};\r\n\r\nconst DEFAULT_PROJECTION_OPTIONS: ProjectionOptions = {\r\n  namespace: undefined,\r\n  eventHandlerInterceptor: undefined,\r\n  styleApplyer: function(domNode: HTMLElement, styleName: string, value: string) {\r\n    // Provides a hook to add vendor prefixes for browsers that still need it.\r\n    (domNode.style as any)[styleName] = value;\r\n  },\r\n  transitions: {\r\n    enter: missingTransition,\r\n    exit: missingTransition\r\n  }\r\n};\r\n\r\nlet applyDefaultProjectionOptions = (projectorOptions?: ProjectionOptions) => {\r\n  return extend(DEFAULT_PROJECTION_OPTIONS, projectorOptions);\r\n};\r\n\r\nlet checkStyleValue = (styleValue: Object) => {\r\n  if (typeof styleValue !== 'string') {\r\n    throw new Error('Style values must be strings');\r\n  }\r\n};\r\n\r\nlet setProperties = function(domNode: Node, properties: VNodeProperties | undefined, projectionOptions: ProjectionOptions) {\r\n  if (!properties) {\r\n    return;\r\n  }\r\n  let eventHandlerInterceptor = projectionOptions.eventHandlerInterceptor;\r\n  let propNames = Object.keys(properties);\r\n  let propCount = propNames.length;\r\n  for (let i = 0; i < propCount; i++) {\r\n    let propName = propNames[i];\r\n    /* tslint:disable:no-var-keyword: edge case */\r\n    let propValue = properties[propName];\r\n    /* tslint:enable:no-var-keyword */\r\n    if (propName === 'className') {\r\n      throw new Error('Property \"className\" is not supported, use \"class\".');\r\n    } else if (propName === 'class') {\r\n      (propValue as string).split(/\\s+/).forEach(token => (domNode as Element).classList.add(token));\r\n    } else if (propName === 'classes') {\r\n      // object with string keys and boolean values\r\n      let classNames = Object.keys(propValue);\r\n      let classNameCount = classNames.length;\r\n      for (let j = 0; j < classNameCount; j++) {\r\n        let className = classNames[j];\r\n        if (propValue[className]) {\r\n          (domNode as Element).classList.add(className);\r\n        }\r\n      }\r\n    } else if (propName === 'styles') {\r\n      // object with string keys and string (!) values\r\n      let styleNames = Object.keys(propValue);\r\n      let styleCount = styleNames.length;\r\n      for (let j = 0; j < styleCount; j++) {\r\n        let styleName = styleNames[j];\r\n        let styleValue = propValue[styleName];\r\n        if (styleValue) {\r\n          checkStyleValue(styleValue);\r\n          projectionOptions.styleApplyer!(<HTMLElement>domNode, styleName, styleValue);\r\n        }\r\n      }\r\n    } else if (propName !== 'key' && propValue !== null && propValue !== undefined) {\r\n      let type = typeof propValue;\r\n      if (type === 'function') {\r\n        if (propName.lastIndexOf('on', 0) === 0) { // lastIndexOf(,0)===0 -> startsWith\r\n          if (eventHandlerInterceptor) {\r\n            propValue = eventHandlerInterceptor(propName, propValue, domNode, properties); // intercept eventhandlers\r\n          }\r\n          if (propName === 'oninput') {\r\n            (function() {\r\n              // record the evt.target.value, because IE and Edge sometimes do a requestAnimationFrame between changing value and running oninput\r\n              let oldPropValue = propValue;\r\n              propValue = function(this: HTMLElement, evt: Event) {\r\n                (evt.target as any)['oninput-value'] = (evt.target as HTMLInputElement).value; // may be HTMLTextAreaElement as well\r\n                oldPropValue.apply(this, [evt]);\r\n              };\r\n            } ());\r\n          }\r\n          (domNode as any)[propName] = propValue;\r\n        }\r\n      } else if (type === 'string' && propName !== 'value' && propName !== 'innerHTML') {\r\n        if (projectionOptions.namespace === NAMESPACE_SVG && propName === 'href') {\r\n          (domNode as Element).setAttributeNS(NAMESPACE_XLINK, propName, propValue);\r\n        } else {\r\n          (domNode as Element).setAttribute(propName, propValue);\r\n        }\r\n      } else {\r\n        (domNode as any)[propName] = propValue;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nlet updateProperties = function(domNode: Node, previousProperties: VNodeProperties | undefined, properties: VNodeProperties | undefined, projectionOptions: ProjectionOptions) {\r\n  if (!properties) {\r\n    return;\r\n  }\r\n  let propertiesUpdated = false;\r\n  let propNames = Object.keys(properties);\r\n  let propCount = propNames.length;\r\n  for (let i = 0; i < propCount; i++) {\r\n    let propName = propNames[i];\r\n    // assuming that properties will be nullified instead of missing is by design\r\n    let propValue = properties[propName];\r\n    let previousValue = previousProperties![propName];\r\n    if (propName === 'class') {\r\n      if (previousValue !== propValue) {\r\n        throw new Error('\"class\" property may not be updated. Use the \"classes\" property for conditional css classes.');\r\n      }\r\n    } else if (propName === 'classes') {\r\n      let classList = (domNode as Element).classList;\r\n      let classNames = Object.keys(propValue);\r\n      let classNameCount = classNames.length;\r\n      for (let j = 0; j < classNameCount; j++) {\r\n        let className = classNames[j];\r\n        let on = !!propValue[className];\r\n        let previousOn = !!previousValue[className];\r\n        if (on === previousOn) {\r\n          continue;\r\n        }\r\n        propertiesUpdated = true;\r\n        if (on) {\r\n          classList.add(className);\r\n        } else {\r\n          classList.remove(className);\r\n        }\r\n      }\r\n    } else if (propName === 'styles') {\r\n      let styleNames = Object.keys(propValue);\r\n      let styleCount = styleNames.length;\r\n      for (let j = 0; j < styleCount; j++) {\r\n        let styleName = styleNames[j];\r\n        let newStyleValue = propValue[styleName];\r\n        let oldStyleValue = previousValue[styleName];\r\n        if (newStyleValue === oldStyleValue) {\r\n          continue;\r\n        }\r\n        propertiesUpdated = true;\r\n        if (newStyleValue) {\r\n          checkStyleValue(newStyleValue);\r\n          projectionOptions.styleApplyer!(domNode as HTMLElement, styleName, newStyleValue);\r\n        } else {\r\n          projectionOptions.styleApplyer!(domNode as HTMLElement, styleName, '');\r\n        }\r\n      }\r\n    } else {\r\n      if (!propValue && typeof previousValue === 'string') {\r\n        propValue = '';\r\n      }\r\n      if (propName === 'value') { // value can be manipulated by the user directly and using event.preventDefault() is not an option\r\n        if ((domNode as any)[propName] !== propValue && (domNode as any)['oninput-value'] !== propValue) {\r\n          (domNode as any)[propName] = propValue; // Reset the value, even if the virtual DOM did not change\r\n          (domNode as any)['oninput-value'] = undefined;\r\n        } // else do not update the domNode, otherwise the cursor position would be changed\r\n        if (propValue !== previousValue) {\r\n          propertiesUpdated = true;\r\n        }\r\n      } else if (propValue !== previousValue) {\r\n        let type = typeof propValue;\r\n        if (type === 'function') {\r\n          throw new Error('Functions may not be updated on subsequent renders (property: ' + propName +\r\n            '). Hint: declare event handler functions outside the render() function.');\r\n        }\r\n        if (type === 'string' && propName !== 'innerHTML') {\r\n          if (projectionOptions.namespace === NAMESPACE_SVG && propName === 'href') {\r\n            (domNode as Element).setAttributeNS(NAMESPACE_XLINK, propName, propValue);\r\n          } else {\r\n            (domNode as Element).setAttribute(propName, propValue);\r\n          }\r\n        } else {\r\n          if ((domNode as any)[propName] !== propValue) { // Comparison is here for side-effects in Edge with scrollLeft and scrollTop\r\n            (domNode as any)[propName] = propValue;\r\n          }\r\n        }\r\n        propertiesUpdated = true;\r\n      }\r\n    }\r\n  }\r\n  return propertiesUpdated;\r\n};\r\n\r\nlet findIndexOfChild = function(children: VNode[], sameAs: VNode, start: number) {\r\n  if (sameAs.vnodeSelector !== '') {\r\n    // Never scan for text-nodes\r\n    for (let i = start; i < children.length; i++) {\r\n      if (same(children[i], sameAs)) {\r\n        return i;\r\n      }\r\n    }\r\n  }\r\n  return -1;\r\n};\r\n\r\nlet nodeAdded = function(vNode: VNode, transitions: TransitionStrategy) {\r\n  if (vNode.properties) {\r\n    let enterAnimation = vNode.properties.enterAnimation;\r\n    if (enterAnimation) {\r\n      if (typeof enterAnimation === 'function') {\r\n        enterAnimation(vNode.domNode as Element, vNode.properties);\r\n      } else {\r\n        transitions.enter(vNode.domNode as Element, vNode.properties, enterAnimation as string);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nlet nodeToRemove = function(vNode: VNode, transitions: TransitionStrategy) {\r\n  let domNode: Node = vNode.domNode!;\r\n  if (vNode.properties) {\r\n    let exitAnimation = vNode.properties.exitAnimation;\r\n    if (exitAnimation) {\r\n      (domNode as HTMLElement).style.pointerEvents = 'none';\r\n      let removeDomNode = function() {\r\n        if (domNode.parentNode) {\r\n          domNode.parentNode.removeChild(domNode);\r\n        }\r\n      };\r\n      if (typeof exitAnimation === 'function') {\r\n        exitAnimation(domNode as Element, removeDomNode, vNode.properties);\r\n        return;\r\n      } else {\r\n        transitions.exit(vNode.domNode as Element, vNode.properties, exitAnimation as string, removeDomNode);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n  if (domNode.parentNode) {\r\n    domNode.parentNode.removeChild(domNode);\r\n  }\r\n};\r\n\r\nlet checkDistinguishable = function(childNodes: VNode[], indexToCheck: number, parentVNode: VNode, operation: string) {\r\n  let childNode = childNodes[indexToCheck];\r\n  if (childNode.vnodeSelector === '') {\r\n    return; // Text nodes need not be distinguishable\r\n  }\r\n  let properties = childNode.properties;\r\n  let key = properties ? (properties.key === undefined ? properties.bind : properties.key) : undefined;\r\n  if (!key) { // A key is just assumed to be unique\r\n    for (let i = 0; i < childNodes.length; i++) {\r\n      if (i !== indexToCheck) {\r\n        let node = childNodes[i];\r\n        if (same(node, childNode)) {\r\n          if (operation === 'added') {\r\n            throw new Error(parentVNode.vnodeSelector + ' had a ' + childNode.vnodeSelector + ' child ' +\r\n              'added, but there is now more than one. You must add unique key properties to make them distinguishable.');\r\n          } else {\r\n            throw new Error(parentVNode.vnodeSelector + ' had a ' + childNode.vnodeSelector + ' child ' +\r\n              'removed, but there were more than one. You must add unique key properties to make them distinguishable.');\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nlet createDom: (vnode: VNode, parentNode: Node, insertBefore: Node | null | undefined, projectionOptions: ProjectionOptions) => void;\r\nlet updateDom: (previous: VNode, vnode: VNode, projectionOptions: ProjectionOptions) => boolean;\r\n\r\nlet updateChildren = function(vnode: VNode, domNode: Node, oldChildren: VNode[] | undefined, newChildren: VNode[] | undefined, projectionOptions: ProjectionOptions) {\r\n  if (oldChildren === newChildren) {\r\n    return false;\r\n  }\r\n  oldChildren = oldChildren || emptyArray;\r\n  newChildren = newChildren || emptyArray;\r\n  let oldChildrenLength = oldChildren.length;\r\n  let newChildrenLength = newChildren.length;\r\n  let transitions = projectionOptions.transitions!;\r\n\r\n  let oldIndex = 0;\r\n  let newIndex = 0;\r\n  let i: number;\r\n  let textUpdated = false;\r\n  while (newIndex < newChildrenLength) {\r\n    let oldChild = (oldIndex < oldChildrenLength) ? oldChildren[oldIndex] : undefined;\r\n    let newChild = newChildren[newIndex];\r\n    if (oldChild !== undefined && same(oldChild, newChild)) {\r\n      textUpdated = updateDom(oldChild, newChild, projectionOptions) || textUpdated;\r\n      oldIndex++;\r\n    } else {\r\n      let findOldIndex = findIndexOfChild(oldChildren, newChild, oldIndex + 1);\r\n      if (findOldIndex >= 0) {\r\n        // Remove preceding missing children\r\n        for (i = oldIndex; i < findOldIndex; i++) {\r\n          nodeToRemove(oldChildren[i], transitions);\r\n          checkDistinguishable(oldChildren, i, vnode, 'removed');\r\n        }\r\n        textUpdated = updateDom(oldChildren[findOldIndex], newChild, projectionOptions) || textUpdated;\r\n        oldIndex = findOldIndex + 1;\r\n      } else {\r\n        // New child\r\n        createDom(newChild, domNode, (oldIndex < oldChildrenLength) ? oldChildren[oldIndex].domNode : undefined, projectionOptions);\r\n        nodeAdded(newChild, transitions);\r\n        checkDistinguishable(newChildren, newIndex, vnode, 'added');\r\n      }\r\n    }\r\n    newIndex++;\r\n  }\r\n  if (oldChildrenLength > oldIndex) {\r\n    // Remove child fragments\r\n    for (i = oldIndex; i < oldChildrenLength; i++) {\r\n      nodeToRemove(oldChildren[i], transitions);\r\n      checkDistinguishable(oldChildren, i, vnode, 'removed');\r\n    }\r\n  }\r\n  return textUpdated;\r\n};\r\n\r\nlet addChildren = function(domNode: Node, children: VNode[] | undefined, projectionOptions: ProjectionOptions) {\r\n  if (!children) {\r\n    return;\r\n  }\r\n  for (let i = 0; i < children.length; i++) {\r\n    createDom(children[i], domNode, undefined, projectionOptions);\r\n  }\r\n};\r\n\r\nlet initPropertiesAndChildren = function(domNode: Node, vnode: VNode, projectionOptions: ProjectionOptions) {\r\n  addChildren(domNode, vnode.children, projectionOptions); // children before properties, needed for value property of <select>.\r\n  if (vnode.text) {\r\n    domNode.textContent = vnode.text;\r\n  }\r\n  setProperties(domNode, vnode.properties, projectionOptions);\r\n  if (vnode.properties && vnode.properties.afterCreate) {\r\n    vnode.properties.afterCreate.apply(vnode.properties.bind || vnode.properties, [domNode as Element, projectionOptions, vnode.vnodeSelector, vnode.properties, vnode.children]);\r\n  }\r\n};\r\n\r\ncreateDom = function(vnode, parentNode, insertBefore, projectionOptions) {\r\n  let domNode: Node | undefined, i: number, c: string, start = 0, type: string, found: string;\r\n  let vnodeSelector = vnode.vnodeSelector;\r\n  if (vnodeSelector === '') {\r\n    domNode = vnode.domNode = document.createTextNode(vnode.text!);\r\n    if (insertBefore !== undefined) {\r\n      parentNode.insertBefore(domNode, insertBefore);\r\n    } else {\r\n      parentNode.appendChild(domNode);\r\n    }\r\n  } else {\r\n    for (i = 0; i <= vnodeSelector.length; ++i) {\r\n      c = vnodeSelector.charAt(i);\r\n      if (i === vnodeSelector.length || c === '.' || c === '#') {\r\n        type = vnodeSelector.charAt(start - 1);\r\n        found = vnodeSelector.slice(start, i);\r\n        if (type === '.') {\r\n          (domNode as HTMLElement).classList.add(found);\r\n        } else if (type === '#') {\r\n          (domNode as Element).id = found;\r\n        } else {\r\n          if (found === 'svg') {\r\n            projectionOptions = extend(projectionOptions, { namespace: NAMESPACE_SVG });\r\n          }\r\n          if (projectionOptions.namespace !== undefined) {\r\n            domNode = vnode.domNode = document.createElementNS(projectionOptions.namespace, found);\r\n          } else {\r\n            domNode = vnode.domNode = document.createElement(found);\r\n            if (found === 'input' && vnode.properties && vnode.properties.type !== undefined) {\r\n              // IE8 and older don't support setting input type after the DOM Node has been added to the document\r\n              (domNode as Element).setAttribute(\"type\", vnode.properties.type);\r\n            }\r\n          }\r\n          if (insertBefore !== undefined) {\r\n            parentNode.insertBefore(domNode, insertBefore);\r\n          } else {\r\n            parentNode.appendChild(domNode);\r\n          }\r\n        }\r\n        start = i + 1;\r\n      }\r\n    }\r\n    initPropertiesAndChildren(domNode!, vnode, projectionOptions);\r\n  }\r\n};\r\n\r\nupdateDom = function(previous, vnode, projectionOptions) {\r\n  let domNode = previous.domNode!;\r\n  let textUpdated = false;\r\n  if (previous === vnode) {\r\n    return false; // By contract, VNode objects may not be modified anymore after passing them to maquette\r\n  }\r\n  let updated = false;\r\n  if (vnode.vnodeSelector === '') {\r\n    if (vnode.text !== previous.text) {\r\n      let newVNode = document.createTextNode(vnode.text!);\r\n      domNode.parentNode.replaceChild(newVNode, domNode);\r\n      vnode.domNode = newVNode;\r\n      textUpdated = true;\r\n      return textUpdated;\r\n    }\r\n  } else {\r\n    if (vnode.vnodeSelector.lastIndexOf('svg', 0) === 0) { // lastIndexOf(needle,0)===0 means StartsWith\r\n      projectionOptions = extend(projectionOptions, { namespace: NAMESPACE_SVG });\r\n    }\r\n    if (previous.text !== vnode.text) {\r\n      updated = true;\r\n      if (vnode.text === undefined) {\r\n        domNode.removeChild(domNode.firstChild); // the only textnode presumably\r\n      } else {\r\n        domNode.textContent = vnode.text;\r\n      }\r\n    }\r\n    updated = updateChildren(vnode, domNode, previous.children, vnode.children, projectionOptions) || updated;\r\n    updated = updateProperties(domNode, previous.properties, vnode.properties, projectionOptions) || updated;\r\n    if (vnode.properties && vnode.properties.afterUpdate) {\r\n      vnode.properties.afterUpdate.apply(vnode.properties.bind || vnode.properties, [<Element>domNode, projectionOptions, vnode.vnodeSelector, vnode.properties, vnode.children]);\r\n    }\r\n  }\r\n  if (updated && vnode.properties && vnode.properties.updateAnimation) {\r\n    vnode.properties.updateAnimation(<Element>domNode, vnode.properties, previous.properties);\r\n  }\r\n  vnode.domNode = previous.domNode;\r\n  return textUpdated;\r\n};\r\n\r\nlet createProjection = function(vnode: VNode, projectionOptions: ProjectionOptions): Projection {\r\n  return {\r\n    update: function(updatedVnode: VNode) {\r\n      if (vnode.vnodeSelector !== updatedVnode.vnodeSelector) {\r\n        throw new Error('The selector for the root VNode may not be changed. (consider using dom.merge and add one extra level to the virtual DOM)');\r\n      }\r\n      updateDom(vnode, updatedVnode, projectionOptions);\r\n      vnode = updatedVnode;\r\n    },\r\n    domNode: <Element>vnode.domNode\r\n  };\r\n};\r\n\r\n// The following line is not possible in Typescript, hence the workaround in the two lines below\r\n// export type VNodeChild = string|VNode|Array<VNodeChild>\r\n/**\r\n * Only needed for the definition of [[VNodeChild]].\r\n */\r\nexport interface VNodeChildren extends Array<VNodeChild> { }\r\n/**\r\n * These are valid values for the children parameter of the [[h]] function.\r\n */\r\nexport type VNodeChild = string | VNode | VNodeChildren | null | undefined;\r\n\r\n/**\r\n * Contains all valid method signatures for the [[h]] function.\r\n */\r\nexport interface H {\r\n  /**\r\n   * @param selector    Contains the tagName, id and fixed css classnames in CSS selector format.\r\n   *                    It is formatted as follows: `tagname.cssclass1.cssclass2#id`.\r\n   * @param properties  An object literal containing properties that will be placed on the DOM node.\r\n   * @param children    Virtual DOM nodes and strings to add as child nodes.\r\n   *                    `children` may contain [[VNode]]s, `string`s, nested arrays, `null` and `undefined`.\r\n   *                    Nested arrays are flattened, `null` and `undefined` are removed.\r\n   *\r\n   * @returns           A VNode object, used to render a real DOM later.\r\n   */\r\n  (selector: string, properties?: VNodeProperties, ...children: VNodeChild[]): VNode;\r\n  (selector: string, ...children: VNodeChild[]): VNode;\r\n}\r\n\r\n/**\r\n * The `h` function is used to create a virtual DOM node.\r\n * This function is largely inspired by the mercuryjs and mithril frameworks.\r\n * The `h` stands for (virtual) hyperscript.\r\n *\r\n * All possible method signatures of this function can be found in the [[H]] 'interface'.\r\n *\r\n * NOTE: There are {@link http://maquettejs.org/docs/rules.html|three basic rules} you should be aware of when updating the virtual DOM.\r\n */\r\nexport let h: H;\r\n\r\n// The other two parameters are not added here, because the Typescript compiler creates surrogate code for destructuring 'children'.\r\nh = function(selector: string): VNode {\r\n  let properties = arguments[1];\r\n  if (typeof selector !== 'string') {\r\n    throw new Error();\r\n  }\r\n  let childIndex = 1;\r\n  if (properties && !properties.hasOwnProperty('vnodeSelector') && !Array.isArray(properties) && typeof properties === 'object') {\r\n    childIndex = 2;\r\n  } else {\r\n    // Optional properties argument was omitted\r\n    properties = undefined;\r\n  }\r\n  let text: string | undefined;\r\n  let children: VNode[] | undefined;\r\n  let argsLength = arguments.length;\r\n  // Recognize a common special case where there is only a single text node\r\n  if (argsLength === childIndex + 1) {\r\n    let onlyChild = arguments[childIndex];\r\n    if (typeof onlyChild === 'string') {\r\n      text = onlyChild;\r\n    } else if (onlyChild !== undefined && onlyChild !== null && onlyChild.length === 1 && typeof onlyChild[0] === 'string') {\r\n      text = onlyChild[0];\r\n    }\r\n  }\r\n  if (text === undefined) {\r\n    children = [];\r\n    for (; childIndex < argsLength; childIndex++) {\r\n      let child = arguments[childIndex];\r\n      if (child === null || child === undefined) {\r\n      } else if (Array.isArray(child)) {\r\n        appendChildren(selector, child, children);\r\n      } else if (child.hasOwnProperty('vnodeSelector')) {\r\n        children.push(child);\r\n      } else {\r\n        children.push(toTextVNode(child));\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    vnodeSelector: selector,\r\n    properties: properties,\r\n    children: children,\r\n    text: (text === '') ? undefined : text,\r\n    domNode: null\r\n  };\r\n};\r\n\r\n/**\r\n * Contains simple low-level utility functions to manipulate the real DOM.\r\n */\r\nexport let dom = {\r\n\r\n  /**\r\n   * Creates a real DOM tree from `vnode`. The [[Projection]] object returned will contain the resulting DOM Node in\r\n   * its [[Projection.domNode|domNode]] property.\r\n   * This is a low-level method. Users will typically use a [[Projector]] instead.\r\n   * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]]\r\n   * objects may only be rendered once.\r\n   * @param projectionOptions - Options to be used to create and update the projection.\r\n   * @returns The [[Projection]] which also contains the DOM Node that was created.\r\n   */\r\n  create: function(vnode: VNode, projectionOptions?: ProjectionOptions): Projection {\r\n    projectionOptions = applyDefaultProjectionOptions(projectionOptions);\r\n    createDom(vnode, document.createElement('div'), undefined, projectionOptions);\r\n    return createProjection(vnode, projectionOptions);\r\n  },\r\n\r\n  /**\r\n   * Appends a new childnode to the DOM which is generated from a [[VNode]].\r\n   * This is a low-level method. Users will typically use a [[Projector]] instead.\r\n   * @param parentNode - The parent node for the new childNode.\r\n   * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]]\r\n   * objects may only be rendered once.\r\n   * @param projectionOptions - Options to be used to create and update the [[Projection]].\r\n   * @returns The [[Projection]] that was created.\r\n   */\r\n  append: function(parentNode: Element, vnode: VNode, projectionOptions?: ProjectionOptions): Projection {\r\n    projectionOptions = applyDefaultProjectionOptions(projectionOptions);\r\n    createDom(vnode, parentNode, undefined, projectionOptions);\r\n    return createProjection(vnode, projectionOptions);\r\n  },\r\n\r\n  /**\r\n   * Inserts a new DOM node which is generated from a [[VNode]].\r\n   * This is a low-level method. Users wil typically use a [[Projector]] instead.\r\n   * @param beforeNode - The node that the DOM Node is inserted before.\r\n   * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function.\r\n   * NOTE: [[VNode]] objects may only be rendered once.\r\n   * @param projectionOptions - Options to be used to create and update the projection, see [[createProjector]].\r\n   * @returns The [[Projection]] that was created.\r\n   */\r\n  insertBefore: function(beforeNode: Element, vnode: VNode, projectionOptions?: ProjectionOptions): Projection {\r\n    projectionOptions = applyDefaultProjectionOptions(projectionOptions);\r\n    createDom(vnode, beforeNode.parentNode, beforeNode, projectionOptions);\r\n    return createProjection(vnode, projectionOptions);\r\n  },\r\n\r\n  /**\r\n   * Merges a new DOM node which is generated from a [[VNode]] with an existing DOM Node.\r\n   * This means that the virtual DOM and the real DOM will have one overlapping element.\r\n   * Therefore the selector for the root [[VNode]] will be ignored, but its properties and children will be applied to the Element provided.\r\n   * This is a low-level method. Users wil typically use a [[Projector]] instead.\r\n   * @param element - The existing element to adopt as the root of the new virtual DOM. Existing attributes and childnodes are preserved.\r\n   * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]] objects\r\n   * may only be rendered once.\r\n   * @param projectionOptions - Options to be used to create and update the projection, see [[createProjector]].\r\n   * @returns The [[Projection]] that was created.\r\n   */\r\n  merge: function(element: Element, vnode: VNode, projectionOptions?: ProjectionOptions): Projection {\r\n    projectionOptions = applyDefaultProjectionOptions(projectionOptions);\r\n    vnode.domNode = element;\r\n    initPropertiesAndChildren(element, vnode, projectionOptions);\r\n    return createProjection(vnode, projectionOptions);\r\n  }\r\n\r\n};\r\n\r\n/**\r\n * A CalculationCache object remembers the previous outcome of a calculation along with the inputs.\r\n * On subsequent calls the previous outcome is returned if the inputs are identical.\r\n * This object can be used to bypass both rendering and diffing of a virtual DOM subtree.\r\n * Instances of CalculationCache can be created using [[createCache]].\r\n *\r\n * @param <Result> The type of the value that is cached.\r\n */\r\nexport interface CalculationCache<Result> {\r\n  /**\r\n   * Manually invalidates the cached outcome.\r\n   */\r\n  invalidate(): void;\r\n  /**\r\n   * If the inputs array matches the inputs array from the previous invocation, this method returns the result of the previous invocation.\r\n   * Otherwise, the calculation function is invoked and its result is cached and returned.\r\n   * Objects in the inputs array are compared using ===.\r\n   * @param inputs - Array of objects that are to be compared using === with the inputs from the previous invocation.\r\n   * These objects are assumed to be immutable primitive values.\r\n   * @param calculation - Function that takes zero arguments and returns an object (A [[VNode]] presumably) that can be cached.\r\n   */\r\n  result(inputs: Object[], calculation: () => Result): Result;\r\n}\r\n\r\n/**\r\n * Creates a [[CalculationCache]] object, useful for caching [[VNode]] trees.\r\n * In practice, caching of [[VNode]] trees is not needed, because achieving 60 frames per second is almost never a problem.\r\n * For more information, see [[CalculationCache]].\r\n *\r\n * @param <Result> The type of the value that is cached.\r\n */\r\nexport let createCache = <Result>(): CalculationCache<Result> => {\r\n  let cachedInputs: Object[] | undefined;\r\n  let cachedOutcome: Result | undefined;\r\n  return {\r\n\r\n    invalidate: function() {\r\n      cachedOutcome = undefined;\r\n      cachedInputs = undefined;\r\n    },\r\n\r\n    result: function(inputs: Object[], calculation: () => Result) {\r\n      if (cachedInputs) {\r\n        for (let i = 0; i < inputs.length; i++) {\r\n          if (cachedInputs[i] !== inputs[i]) {\r\n            cachedOutcome = undefined;\r\n          }\r\n        }\r\n      }\r\n      if (!cachedOutcome) {\r\n        cachedOutcome = calculation();\r\n        cachedInputs = inputs;\r\n      }\r\n      return cachedOutcome;\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Keeps an array of result objects synchronized with an array of source objects.\r\n * See {@link http://maquettejs.org/docs/arrays.html|Working with arrays}.\r\n *\r\n * Mapping provides a [[map]] function that updates its [[results]].\r\n * The [[map]] function can be called multiple times and the results will get created, removed and updated accordingly.\r\n * A Mapping can be used to keep an array of components (objects with a `renderMaquette` method) synchronized with an array of data.\r\n * Instances of Mapping can be created using [[createMapping]].\r\n *\r\n * @param <Source>   The type of source elements. Usually the data type.\r\n * @param <Target>   The type of target elements. Usually the component type.\r\n */\r\nexport interface Mapping<Source, Target> {\r\n  /**\r\n   * The array of results. These results will be synchronized with the latest array of sources that were provided using [[map]].\r\n   */\r\n  results: Array<Target>;\r\n  /**\r\n   * Maps a new array of sources and updates [[results]].\r\n   *\r\n   * @param newSources   The new array of sources.\r\n   */\r\n  map(newSources: Array<Source>): void;\r\n}\r\n\r\n/**\r\n * Creates a {@link Mapping} instance that keeps an array of result objects synchronized with an array of source objects.\r\n * See {@link http://maquettejs.org/docs/arrays.html|Working with arrays}.\r\n *\r\n * @param <Source>       The type of source items. A database-record for instance.\r\n * @param <Target>       The type of target items. A [[Component]] for instance.\r\n * @param getSourceKey   `function(source)` that must return a key to identify each source object. The result must either be a string or a number.\r\n * @param createResult   `function(source, index)` that must create a new result object from a given source. This function is identical\r\n *                       to the `callback` argument in `Array.map(callback)`.\r\n * @param updateResult   `function(source, target, index)` that updates a result to an updated source.\r\n */\r\nexport let createMapping = <Source, Target>(\r\n  getSourceKey: (source: Source) => (string | number),\r\n  createResult: (source: Source, index: number) => Target,\r\n  updateResult: (source: Source, target: Target, index: number) => void): Mapping<Source, Target> => {\r\n  let keys = [] as Object[];\r\n  let results = [] as Target[];\r\n\r\n  return {\r\n    results: results,\r\n    map: function(newSources: Source[]) {\r\n      let newKeys = newSources.map(getSourceKey);\r\n      let oldTargets = results.slice();\r\n      let oldIndex = 0;\r\n      for (let i = 0; i < newSources.length; i++) {\r\n        let source = newSources[i];\r\n        let sourceKey = newKeys[i];\r\n        if (sourceKey === keys[oldIndex]) {\r\n          results[i] = oldTargets[oldIndex];\r\n          updateResult(source, oldTargets[oldIndex], i);\r\n          oldIndex++;\r\n        } else {\r\n          let found = false;\r\n          for (let j = 1; j < keys.length + 1; j++) {\r\n            let searchIndex = (oldIndex + j) % keys.length;\r\n            if (keys[searchIndex] === sourceKey) {\r\n              results[i] = oldTargets[searchIndex];\r\n              updateResult(newSources[i], oldTargets[searchIndex], i);\r\n              oldIndex = searchIndex + 1;\r\n              found = true;\r\n              break;\r\n            }\r\n          }\r\n          if (!found) {\r\n            results[i] = createResult(source, i);\r\n          }\r\n        }\r\n      }\r\n      results.length = newSources.length;\r\n      keys = newKeys;\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Creates a [[Projector]] instance using the provided projectionOptions.\r\n *\r\n * For more information, see [[Projector]].\r\n *\r\n * @param projectorOptions   Options that influence how the DOM is rendered and updated.\r\n */\r\nexport let createProjector = function(projectorOptions?: ProjectorOptions): Projector {\r\n  let projector: Projector;\r\n  let projectionOptions = applyDefaultProjectionOptions(projectorOptions);\r\n  projectionOptions.eventHandlerInterceptor = function(propertyName: string, eventHandler: Function, domNode: Node, properties: VNodeProperties) {\r\n    return function(this: Node) {\r\n      // intercept function calls (event handlers) to do a render afterwards.\r\n      projector.scheduleRender();\r\n      return eventHandler.apply(properties.bind || this, arguments);\r\n    };\r\n  };\r\n  let renderCompleted = true;\r\n  let scheduled: number | undefined;\r\n  let stopped = false;\r\n  let projections = [] as Projection[];\r\n  let renderFunctions = [] as (() => VNode)[]; // matches the projections array\r\n\r\n  let doRender = function() {\r\n    scheduled = undefined;\r\n    if (!renderCompleted) {\r\n      return; // The last render threw an error, it should be logged in the browser console.\r\n    }\r\n    renderCompleted = false;\r\n    for (let i = 0; i < projections.length; i++) {\r\n      let updatedVnode = renderFunctions[i]();\r\n      projections[i].update(updatedVnode);\r\n    }\r\n    renderCompleted = true;\r\n  };\r\n\r\n  projector = {\r\n    renderNow: doRender,\r\n    scheduleRender: function() {\r\n      if (!scheduled && !stopped) {\r\n        scheduled = requestAnimationFrame(doRender);\r\n      }\r\n    },\r\n    stop: function() {\r\n      if (scheduled) {\r\n        cancelAnimationFrame(scheduled);\r\n        scheduled = undefined;\r\n      }\r\n      stopped = true;\r\n    },\r\n\r\n    resume: function() {\r\n      stopped = false;\r\n      renderCompleted = true;\r\n      projector.scheduleRender();\r\n    },\r\n\r\n    append: function(parentNode, renderMaquetteFunction) {\r\n      projections.push(dom.append(parentNode, renderMaquetteFunction(), projectionOptions));\r\n      renderFunctions.push(renderMaquetteFunction);\r\n    },\r\n\r\n    insertBefore: function(beforeNode, renderMaquetteFunction) {\r\n      projections.push(dom.insertBefore(beforeNode, renderMaquetteFunction(), projectionOptions));\r\n      renderFunctions.push(renderMaquetteFunction);\r\n    },\r\n\r\n    merge: function(domNode, renderMaquetteFunction) {\r\n      projections.push(dom.merge(domNode, renderMaquetteFunction(), projectionOptions));\r\n      renderFunctions.push(renderMaquetteFunction);\r\n    },\r\n\r\n    replace: function(domNode, renderMaquetteFunction) {\r\n      let vnode = renderMaquetteFunction();\r\n      createDom(vnode, domNode.parentNode, domNode, projectionOptions);\r\n      domNode.parentNode.removeChild(domNode);\r\n      projections.push(createProjection(vnode, projectionOptions));\r\n      renderFunctions.push(renderMaquetteFunction);\r\n    },\r\n\r\n    detach: function(renderMaquetteFunction) {\r\n      for (let i = 0; i < renderFunctions.length; i++) {\r\n        if (renderFunctions[i] === renderMaquetteFunction) {\r\n          renderFunctions.splice(i, 1);\r\n          return projections.splice(i, 1)[0];\r\n        }\r\n      }\r\n      throw new Error('renderMaquetteFunction was not found');\r\n    }\r\n\r\n  };\r\n  return projector;\r\n};\r\n\r\n/**\r\n * A component is a pattern with which you can split up your web application into self-contained parts.\r\n *\r\n * A component may contain other components.\r\n * This can be achieved by calling the subcomponents `renderMaquette` functions during the [[renderMaquette]] function and by using the\r\n * resulting [[VNode]]s in the return value.\r\n *\r\n * This interface is not used anywhere in the maquette sourcecode, but this is a widely used pattern.\r\n */\r\nexport interface Component {\r\n  /**\r\n   * A function that returns the DOM representation of the component.\r\n   */\r\n  renderMaquette(): VNode | null | undefined;\r\n}\r\n"],"sourceRoot":"/source/"}