/* components/IconButton.svelte generated by Svelte v3.31.0 */
import {
	SvelteComponent,
	attr,
	bubble,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	safe_not_equal,
	toggle_class,
	transition_in,
	transition_out
} from "svelte/internal";

import Image from "./Image.svelte";

function create_if_block_1(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			attr(img, "class", "icon svelte-fi0yj6");
			if (img.src !== (img_src_value = /*icon*/ ctx[0])) attr(img, "src", img_src_value);
			attr(img, "alt", /*alt*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, img, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*icon*/ 1 && img.src !== (img_src_value = /*icon*/ ctx[0])) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*alt*/ 16) {
				attr(img, "alt", /*alt*/ ctx[4]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (20:2) {#if id || image}
function create_if_block(ctx) {
	let image_1;
	let current;

	image_1 = new Image({
			props: {
				id: /*id*/ ctx[1],
				alt: /*alt*/ ctx[4],
				image: /*image*/ ctx[2],
				ignorePointer: true
			}
		});

	return {
		c() {
			create_component(image_1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(image_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const image_1_changes = {};
			if (dirty & /*id*/ 2) image_1_changes.id = /*id*/ ctx[1];
			if (dirty & /*alt*/ 16) image_1_changes.alt = /*alt*/ ctx[4];
			if (dirty & /*image*/ 4) image_1_changes.image = /*image*/ ctx[2];
			image_1.$set(image_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(image_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(image_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(image_1, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let current_block_type_index;
	let if_block;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block, create_if_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*id*/ ctx[1] || /*image*/ ctx[2]) return 0;
		if (/*icon*/ ctx[0]) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx, -1))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			attr(div, "class", "button svelte-fi0yj6");
			toggle_class(div, "small", /*small*/ ctx[5]);
			toggle_class(div, "medium", /*medium*/ ctx[6]);
			toggle_class(div, "large", /*large*/ ctx[7]);
			toggle_class(div, "padded", /*padded*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen(div, "click", /*click_handler*/ ctx[9]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(div, null);
				} else {
					if_block = null;
				}
			}

			if (dirty & /*small*/ 32) {
				toggle_class(div, "small", /*small*/ ctx[5]);
			}

			if (dirty & /*medium*/ 64) {
				toggle_class(div, "medium", /*medium*/ ctx[6]);
			}

			if (dirty & /*large*/ 128) {
				toggle_class(div, "large", /*large*/ ctx[7]);
			}

			if (dirty & /*padded*/ 8) {
				toggle_class(div, "padded", /*padded*/ ctx[3]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}

			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { icon = null } = $$props;
	let { id = null } = $$props;
	let { image = undefined } = $$props;
	let { padded = true } = $$props;
	let { size = null } = $$props;
	let { alt = "" } = $$props;
	let small, medium, large;

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$props => {
		if ("icon" in $$props) $$invalidate(0, icon = $$props.icon);
		if ("id" in $$props) $$invalidate(1, id = $$props.id);
		if ("image" in $$props) $$invalidate(2, image = $$props.image);
		if ("padded" in $$props) $$invalidate(3, padded = $$props.padded);
		if ("size" in $$props) $$invalidate(8, size = $$props.size);
		if ("alt" in $$props) $$invalidate(4, alt = $$props.alt);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*size*/ 256) {
			$: {
				$$invalidate(5, small = $$invalidate(6, medium = $$invalidate(7, large = false)));
				if (size === "small") $$invalidate(5, small = true); else if (size === "large") $$invalidate(7, large = true); else $$invalidate(6, medium = true);
			}
		}
	};

	return [icon, id, image, padded, alt, small, medium, large, size, click_handler];
}

class IconButton extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			icon: 0,
			id: 1,
			image: 2,
			padded: 3,
			size: 8,
			alt: 4
		});
	}
}

export default IconButton;