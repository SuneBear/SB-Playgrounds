/* components/CardHint.svelte generated by Svelte v3.31.0 */
import {
	SvelteComponent,
	append,
	attr,
	binding_callbacks,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	set_style,
	space,
	text as text_1
} from "svelte/internal";

import imgLeft from "../assets/image/ui/hint-card-left.png";
import imgMiddle from "../assets/image/ui/hint-card-middle.png";
import imgRight from "../assets/image/ui/hint-card-right.png";
import { onMount, onDestroy, createEventDispatcher } from "svelte";
import { language } from "../util/locale";
import { InvertedTokenURLs, AllTokens } from "../util/tokens";
import Random from "../util/Random";
import fingerImageUrl from "../assets/image/ui/touch-inv.png";
import treeImageUrl from "../assets/image/ui/tree-inv.png";

function create_if_block_2(ctx) {
	let div;
	let img;
	let img_src_value;

	return {
		c() {
			div = element("div");
			img = element("img");
			if (img.src !== (img_src_value = /*icon*/ ctx[2])) attr(img, "src", img_src_value);
			attr(img, "alt", "");
			attr(img, "class", "token-image svelte-1c19bb0");
			attr(div, "class", "icon-container svelte-1c19bb0");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, img);
		},
		p(ctx, dirty) {
			if (dirty & /*icon*/ 4 && img.src !== (img_src_value = /*icon*/ ctx[2])) {
				attr(img, "src", img_src_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (93:37) 
function create_if_block_1(ctx) {
	let t_value = /*text*/ ctx[0][language.get()] + "";
	let t;

	return {
		c() {
			t = text_1(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*text*/ 1 && t_value !== (t_value = /*text*/ ctx[0][language.get()] + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (91:6) {#if text && typeof text === "string"}
function create_if_block(ctx) {
	let t;

	return {
		c() {
			t = text_1(/*text*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*text*/ 1) set_data(t, /*text*/ ctx[0]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment(ctx) {
	let div4;
	let div1;
	let img0;
	let img0_src_value;
	let t0;
	let div0;
	let t1;
	let img1;
	let img1_src_value;
	let t2;
	let div3;
	let t3;
	let div2;
	let mounted;
	let dispose;
	let if_block0 = /*icon*/ ctx[2] && create_if_block_2(ctx);

	function select_block_type(ctx, dirty) {
		if (/*text*/ ctx[0] && typeof /*text*/ ctx[0] === "string") return create_if_block;
		if (/*text*/ ctx[0] && "en" in /*text*/ ctx[0]) return create_if_block_1;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block1 = current_block_type && current_block_type(ctx);

	return {
		c() {
			div4 = element("div");
			div1 = element("div");
			img0 = element("img");
			t0 = space();
			div0 = element("div");
			t1 = space();
			img1 = element("img");
			t2 = space();
			div3 = element("div");
			if (if_block0) if_block0.c();
			t3 = space();
			div2 = element("div");
			if (if_block1) if_block1.c();
			attr(img0, "class", "card-hint-image slice-0 svelte-1c19bb0");
			attr(img0, "alt", "");
			if (img0.src !== (img0_src_value = imgLeft)) attr(img0, "src", img0_src_value);
			attr(div0, "class", "card-hint-image slice-1 svelte-1c19bb0");
			set_style(div0, "background-image", "url('" + imgMiddle + "')");
			attr(img1, "class", "card-hint-image slice-2 svelte-1c19bb0");
			attr(img1, "alt", "");
			if (img1.src !== (img1_src_value = imgRight)) attr(img1, "src", img1_src_value);
			attr(div1, "class", "card-box svelte-1c19bb0");
			set_style(div1, "width", /*boxWidth*/ ctx[3] + "px");
			attr(div2, "class", "card-text svelte-1c19bb0");
			attr(div3, "class", "card-content svelte-1c19bb0");
			attr(div4, "class", "card-hint-container svelte-1c19bb0");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, div1);
			append(div1, img0);
			append(div1, t0);
			append(div1, div0);
			append(div1, t1);
			append(div1, img1);
			append(div4, t2);
			append(div4, div3);
			if (if_block0) if_block0.m(div3, null);
			append(div3, t3);
			append(div3, div2);
			if (if_block1) if_block1.m(div2, null);
			/*div2_binding*/ ctx[9](div2);

			if (!mounted) {
				dispose = [
					listen(window, "resize", /*resize*/ ctx[4], { passive: true }),
					listen(div4, "click", /*clicked*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*boxWidth*/ 8) {
				set_style(div1, "width", /*boxWidth*/ ctx[3] + "px");
			}

			if (/*icon*/ ctx[2]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					if_block0.m(div3, t3);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if (if_block1) if_block1.d(1);
				if_block1 = current_block_type && current_block_type(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(div2, null);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div4);
			if (if_block0) if_block0.d();

			if (if_block1) {
				if_block1.d();
			}

			/*div2_binding*/ ctx[9](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function updateSize(textEl, text) {
	const r = textEl.getBoundingClientRect();
	return Math.max(270, r.width + 10 + 24 + 40);
}

function instance($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { text = "" } = $$props;
	let { iconMode = null } = $$props;
	let { token = "" } = $$props;
	let icon;
	let textEl;
	let boxWidth;
	const random = Random();
	let currentToken;

	const nextToken = () => {
		$$invalidate(8, currentToken = InvertedTokenURLs[random.pick(AllTokens)]);
		if (iconMode === "token-random") $$invalidate(2, icon = currentToken);
	};

	nextToken();

	onMount(() => {
		resize();
		let interval;

		let timeout = setTimeout(
			() => {
				interval = setInterval(nextToken, 1000);
			},
			1000
		);

		return () => {
			clearTimeout(timeout);
			clearInterval(interval);
		};
	});

	function resize() {
		$$invalidate(3, boxWidth = updateSize(textEl, text));
	}

	function clicked() {
		dispatch("close");
	}

	function div2_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			textEl = $$value;
			$$invalidate(1, textEl);
		});
	}

	$$self.$$set = $$props => {
		if ("text" in $$props) $$invalidate(0, text = $$props.text);
		if ("iconMode" in $$props) $$invalidate(6, iconMode = $$props.iconMode);
		if ("token" in $$props) $$invalidate(7, token = $$props.token);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*textEl, text*/ 3) {
			$: {
				if (textEl && text) {
					$$invalidate(3, boxWidth = updateSize(textEl, text));
				}
			}
		}

		if ($$self.$$.dirty & /*iconMode, currentToken, token*/ 448) {
			$: {
				if (iconMode === "token-random") {
					$$invalidate(2, icon = currentToken);
				} else if (iconMode === "finger") {
					$$invalidate(2, icon = fingerImageUrl);
				} else if (iconMode === "tree") {
					$$invalidate(2, icon = treeImageUrl);
				} else if (iconMode === "token") {
					$$invalidate(2, icon = InvertedTokenURLs[token]);
				}
			}
		}
	};

	return [
		text,
		textEl,
		icon,
		boxWidth,
		resize,
		clicked,
		iconMode,
		token,
		currentToken,
		div2_binding
	];
}

class CardHint extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { text: 0, iconMode: 6, token: 7 });
	}
}

export default CardHint;