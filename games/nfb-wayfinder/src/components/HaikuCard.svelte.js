/* components/HaikuCard.svelte generated by Svelte v3.31.0 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	create_in_transition,
	create_out_transition,
	destroy_each,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	set_style,
	space,
	text,
	transition_in
} from "svelte/internal";

import { InvertedTokenURLs } from "../util/tokens";
import paperJournalOne from "../assets/image/ui/ico_paperJournal1-rotated.png";
import { language, localize } from "../util/locale";
import { onMount } from "svelte";

import {
	fadeInTransition,
	fadeOpacityTransition,
	emptyTransition,
	fadeTransition
} from "../animations/transitions";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	child_ctx[7] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[8] = list[i];
	child_ctx[7] = i;
	return child_ctx;
}

// (40:4) {#each tokens as token, i}
function create_each_block_1(ctx) {
	let div;
	let img;
	let img_src_value;
	let t;
	let div_intro;

	return {
		c() {
			div = element("div");
			img = element("img");
			t = space();
			if (img.src !== (img_src_value = InvertedTokenURLs[/*token*/ ctx[8]])) attr(img, "src", img_src_value);
			attr(img, "alt", "");
			attr(img, "class", "token-image svelte-wamszv");
			attr(div, "class", "token svelte-wamszv");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, img);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*tokens*/ 2 && img.src !== (img_src_value = InvertedTokenURLs[/*token*/ ctx[8]])) {
				attr(img, "src", img_src_value);
			}
		},
		i(local) {
			if (!div_intro) {
				add_render_callback(() => {
					div_intro = create_in_transition(div, /*poemLinesAnimateIn*/ ctx[2], {
						delay: 175 + /*i*/ ctx[7] * 175 + 250,
						duration: 1000
					});

					div_intro.start();
				});
			}
		},
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (50:4) {#each lines as line, i}
function create_each_block(ctx) {
	let p;
	let t0_value = /*line*/ ctx[5][/*curLang*/ ctx[3]] + "";
	let t0;
	let t1;
	let p_intro;

	return {
		c() {
			p = element("p");
			t0 = text(t0_value);
			t1 = space();
			attr(p, "class", "svelte-wamszv");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t0);
			append(p, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*lines, curLang*/ 9 && t0_value !== (t0_value = /*line*/ ctx[5][/*curLang*/ ctx[3]] + "")) set_data(t0, t0_value);
		},
		i(local) {
			if (!p_intro) {
				add_render_callback(() => {
					p_intro = create_in_transition(p, /*poemLinesAnimateIn*/ ctx[2], {
						delay: 175 + (4 + /*i*/ ctx[7]) * 175 + 250,
						duration: 1000
					});

					p_intro.start();
				});
			}
		},
		o: noop,
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

function create_fragment(ctx) {
	let div2;
	let div0;
	let t;
	let div1;
	let div2_intro;
	let div2_outro;
	let current;
	let each_value_1 = /*tokens*/ ctx[1];
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = /*lines*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div2 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t = space();
			div1 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div0, "class", "token-container svelte-wamszv");
			attr(div1, "class", "lines-container svelte-wamszv");
			attr(div2, "class", "container svelte-wamszv");
			set_style(div2, "background-image", "url(" + paperJournalOne + ")");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div0, null);
			}

			append(div2, t);
			append(div2, div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*InvertedTokenURLs, tokens*/ 2) {
				each_value_1 = /*tokens*/ ctx[1];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
						transition_in(each_blocks_1[i], 1);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						transition_in(each_blocks_1[i], 1);
						each_blocks_1[i].m(div0, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty & /*lines, curLang*/ 9) {
				each_value = /*lines*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks_1[i]);
			}

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			add_render_callback(() => {
				if (div2_outro) div2_outro.end(1);
				if (!div2_intro) div2_intro = create_in_transition(div2, fadeTransition, { delay: 500, duration: 500 });
				div2_intro.start();
			});

			current = true;
		},
		o(local) {
			if (div2_intro) div2_intro.invalidate();
			div2_outro = create_out_transition(div2, fadeTransition, { duration: 250 });
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
			if (detaching && div2_outro) div2_outro.end();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { lines } = $$props;
	let { tokens } = $$props;
	let { animatePoem = false } = $$props;
	let poemLinesAnimateIn;
	let curLang = language.get();

	onMount(() => {
		const detachLang = language.subscribe(s => {
			$$invalidate(3, curLang = s);
		});

		return () => {
			detachLang();
		};
	});

	$$self.$$set = $$props => {
		if ("lines" in $$props) $$invalidate(0, lines = $$props.lines);
		if ("tokens" in $$props) $$invalidate(1, tokens = $$props.tokens);
		if ("animatePoem" in $$props) $$invalidate(4, animatePoem = $$props.animatePoem);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*animatePoem*/ 16) {
			$: $$invalidate(2, poemLinesAnimateIn = animatePoem ? fadeInTransition : emptyTransition);
		}
	};

	return [lines, tokens, poemLinesAnimateIn, curLang, animatePoem];
}

class HaikuCard extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { lines: 0, tokens: 1, animatePoem: 4 });
	}
}

export default HaikuCard;