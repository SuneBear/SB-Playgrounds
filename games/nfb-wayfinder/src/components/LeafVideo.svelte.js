/* components/LeafVideo.svelte generated by Svelte v3.31.0 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	binding_callbacks,
	create_in_transition,
	create_out_transition,
	detach,
	element,
	globals,
	init,
	insert,
	listen,
	safe_not_equal
} from "svelte/internal";

const { window: window_1 } = globals;
import { onMount } from "svelte";
import videoSrc from "../assets/video/transition.mp4";
import { fadeInTransition } from "../animations/transitions";
import objectFit from "../util/objectFit";

function create_fragment(ctx) {
	let div;
	let video_1;
	let video_1_src_value;
	let video_1_intro;
	let video_1_outro;
	let current;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			video_1 = element("video");
			attr(video_1, "class", "leaf-video svelte-fpz107");
			video_1.autoplay = true;
			video_1.muted = true;
			video_1.playsInline = true;
			if (video_1.src !== (video_1_src_value = videoSrc)) attr(video_1, "src", video_1_src_value);
			attr(div, "class", "leaf-video-container svelte-fpz107");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, video_1);
			/*video_1_binding*/ ctx[4](video_1);
			current = true;

			if (!mounted) {
				dispose = listen(window_1, "resize", /*onScreenResize*/ ctx[3], { passive: true });
				mounted = true;
			}
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (video_1_outro) video_1_outro.end(1);

				if (!video_1_intro) video_1_intro = create_in_transition(video_1, fadeInTransition, {
					delay: 0,
					y: 0,
					.../*fadeInOptions*/ ctx[0]
				});

				video_1_intro.start();
			});

			current = true;
		},
		o(local) {
			if (video_1_intro) video_1_intro.invalidate();
			video_1_outro = create_out_transition(video_1, fadeInTransition, { y: 0, .../*fadeOutOptions*/ ctx[1] });
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			/*video_1_binding*/ ctx[4](null);
			if (detaching && video_1_outro) video_1_outro.end();
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { fadeInOptions = {} } = $$props;
	let { fadeOutOptions = {} } = $$props;
	let video;

	// let x, y, width, height;
	let metadataCB;

	let metadata = new Promise(resolve => {
			metadataCB = resolve;
		});

	onMount(() => {
		let detach = () => {
			
		};

		if (video.readyState <= 0) {
			video.addEventListener("loadedmetadata", metadataCB);
			detach = () => video.removeEventListener("loadedmetadata", metadataCB);
		} else {
			metadataCB();
		}

		onScreenResize();
		$$invalidate(2, video.muted = true, video);
		video.play();

		return () => {
			if (video) {
				video.pause();
			}

			detach();
		};
	});

	function onScreenResize() {
		if (!video) return;

		if (video.readyState <= 0) {
			metadata.then(() => resizeVideo());
		} else {
			resizeVideo();
		}
	}

	function resizeVideo() {
		if (video) {
			const aspect = window.innerWidth / window.innerHeight;

			const [tx, ty, sw, sh] = objectFit({
				parentWidth: window.innerWidth,
				parentHeight: window.innerHeight,
				childWidth: video.videoWidth,
				childHeight: video.videoHeight,
				fit: window.innerWidth < window.innerHeight
				? "cover"
				: "contain"
			});

			// y = ty;
			// x = tx;
			// width = sw;
			// height = sh;
			Object.assign(video.style, {
				left: `${tx}px`,
				top: `${ty}px`,
				width: `${sw}px`,
				height: `${sh}px`
			});

			const fontHeight = 32;
		} // textYPosition = window.innerHeight * 0.895;
	}

	function video_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			video = $$value;
			$$invalidate(2, video);
		});
	}

	$$self.$$set = $$props => {
		if ("fadeInOptions" in $$props) $$invalidate(0, fadeInOptions = $$props.fadeInOptions);
		if ("fadeOutOptions" in $$props) $$invalidate(1, fadeOutOptions = $$props.fadeOutOptions);
	};

	return [fadeInOptions, fadeOutOptions, video, onScreenResize, video_1_binding];
}

class LeafVideo extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { fadeInOptions: 0, fadeOutOptions: 1 });
	}
}

export default LeafVideo;