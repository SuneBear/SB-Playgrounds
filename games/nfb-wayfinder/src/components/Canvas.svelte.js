/* components/Canvas.svelte generated by Svelte v3.31.0 */
import {
	SvelteComponent,
	attr,
	binding_callbacks,
	detach,
	element,
	empty,
	init,
	insert,
	noop,
	safe_not_equal
} from "svelte/internal";

import { onMount, afterUpdate } from "svelte";

function create_if_block(ctx) {
	let div1;

	return {
		c() {
			div1 = element("div");
			div1.innerHTML = `<div class="test"></div>`;
			attr(div1, "class", "canvas-container svelte-146xou4");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			/*div1_binding*/ ctx[6](div1);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div1);
			/*div1_binding*/ ctx[6](null);
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;
	let if_block = !/*parent*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (!/*parent*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { canvas } = $$props;
	let { resize } = $$props;
	let { stats } = $$props;
	let { parent } = $$props;
	let { embed = false } = $$props;
	let container;
	if (parent) container = parent;
	let resizeObserver;

	if (typeof window.ResizeObserver !== "undefined") {
		resizeObserver = new window.ResizeObserver(entries => {
				onResize();
			});
	}

	const isIOS = (/(iOS|iPhone|iPad|iPod)/i).test(navigator.userAgent);

	if (isIOS) {
		document.onselectstart = function () {
			return false;
		};

		document.addEventListener(
			"touchmove",
			function (event) {
				if (event.scale !== 1) {
					event.preventDefault();
				}
			},
			{ passive: false }
		);
	}

	afterUpdate(() => {
		
	});

	onMount(() => {
		if (canvas) {
			if (!embed || !canvas.parentElement) container.appendChild(canvas);
		}

		if (stats) {
			container.appendChild(stats);
		}

		if (isIOS) {
			onOrientationChange();

			setTimeout(
				() => {
					onOrientationChange();
				},
				500
			);
		}

		// canvas.addEventListener(
		//   "touchstart",
		//   function (event) {
		//     const computed = document.documentElement.getBoundingClientRect();
		//     if (computed.height !== window.innerHeight) {
		//       // alert("gonna fix!");
		//       // document.documentElement.style.height = `${window.innerHeight}px`;
		//       // window.scrollTo(0, 0);
		//     }
		//   },
		//   { passive: false }
		// );
		onResize();

		if (resizeObserver) resizeObserver.observe(container);
		window.addEventListener("resize", onWindowChanged, { passive: true });

		// window.scrollTo(0, 0);
		window.addEventListener("orientationchange", onOrientationChange, { passive: true });

		return () => {
			if (canvas && canvas.parentElement === container) {
				canvas.parentElement.removeChild(canvas);
			}

			if (resizeObserver) resizeObserver.unobserve(container);
			window.removeEventListener("resize", onResize);
			window.removeEventListener("orientationchange", onOrientationChange);
		};
	});

	function onOrientationChange() {
		if (isIOS) {
			setTimeout(
				() => {
					window.scrollTo(0, 0);
					document.documentElement.style.height = `${window.innerHeight}px`;
					onResize();

					setTimeout(
						() => {
							document.documentElement.style.height = `100%`;
							onResize();
						},
						500
					);
				},
				500
			);
		} // setTimeout(() => {
		//   const computed = document.documentElement.getBoundingClientRect();

		//   if (computed.height !== window.innerHeight) {
		//     document.documentElement.style.height = `${window.innerHeight}px`;
		//     document.documentElement.style.height = `100%`;
		//     window.scrollTo(0, 0);
		//   }
		// }, 500);
		onResize();
	}

	function onWindowChanged() {
		// window.scrollTo(0, 0);
		// setTimeout(() => window.scrollTo(0, 0), 350);
		// setTimeout(() => window.scrollTo(0, 0), 100);
		// setTimeout(() => {
		// document.body.style.height = `100vh`;
		//   document.documentElement.style.height = `100vh`;
		// document.documentElement.style.height = `${window.innerHeight}px`;
		// }, 350);
		document.documentElement.style.height = `${window.innerHeight}px`;

		window.scrollTo(0, 0);
		onResize();
	}

	function onResize() {
		if (typeof resize === "function") {
			const r = embed ? container.getBoundingClientRect() : null;
			const w = embed ? r.width : window.innerWidth;
			const h = embed ? r.height : window.innerHeight;

			// const h = window.innerHeight;
			resize(Math.round(w), Math.round(h));
		}
	}

	function div1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			container = $$value;
			$$invalidate(1, container);
		});
	}

	$$self.$$set = $$props => {
		if ("canvas" in $$props) $$invalidate(2, canvas = $$props.canvas);
		if ("resize" in $$props) $$invalidate(3, resize = $$props.resize);
		if ("stats" in $$props) $$invalidate(4, stats = $$props.stats);
		if ("parent" in $$props) $$invalidate(0, parent = $$props.parent);
		if ("embed" in $$props) $$invalidate(5, embed = $$props.embed);
	};

	return [parent, container, canvas, resize, stats, embed, div1_binding];
}

class Canvas extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			canvas: 2,
			resize: 3,
			stats: 4,
			parent: 0,
			embed: 5
		});
	}
}

export default Canvas;