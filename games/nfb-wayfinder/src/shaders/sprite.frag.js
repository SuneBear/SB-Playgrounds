module.exports="#define GLSLIFY 1\nvarying vec2 originalUv;\nvarying vec2 vUv;\nvarying float vYGradient;\nvarying vec2 vGroundUv;\nuniform sampler2D map;\nuniform sampler2D noiseMap;\nuniform float time;\nuniform bool useMapDiscard;\nvarying vec3 vObjectCoord;\nvarying vec2 vScreenScale;\nuniform vec3 color;\nuniform float aspect;\nuniform float spriteHeight;\nvarying vec3 vWorldPosition;\nvarying vec3 vGroundColor;\nvarying float vDataScale;\nvarying vec3 vBaseWorldPosition;\nvarying vec3 vCenterWorldPos;\nuniform sampler2D groundMap;\nuniform bool silhouette;\nuniform vec3 tintColor;\nuniform vec3 shadowColor;\n// varying float vSpin;\n\n// void main () {\n//   gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n//   gl_FragColor += texture2D(map, vUv);\n// }\n\nvoid main () {\n  gl_FragColor = texture2D(map, vUv);\n  gl_FragColor.rgb *= tintColor;\n  // gl_FragColor.a = 1.0;\n  float alphaMap = gl_FragColor.a;\n  if (alphaMap < 0.5) discard;\n  if (silhouette) {\n    // float vYGrad0 = 1.0 - pow(clamp(vYGradient / 1.0, 0.0, 1.0), 1.0);\n    // gl_FragColor.a *= 1.0 - clamp(distance(vCenterWorldPos, vWorldPosition) / 1.0, 0.0, 0.5);\n    \n    float falloff = 1.0 - clamp(pow(vWorldPosition.y / 1.0, 1.0), 0.0, 1.0);\n    // float falloff = 1.0 - clamp(pow(distance(vCenterWorldPos, vWorldPosition) / 2.75, 1.0), 0.0, 1.0);\n    float shadowOpacity = 0.25;\n    gl_FragColor.rgb = mix(vec3(1.0), shadowColor, alphaMap * falloff * shadowOpacity);\n    gl_FragColor.a = 1.0;\n    // gl_FragColor.rgb = vec3(shadowColor);\n    // gl_FragColor.a *= ;\n    // gl_FragColor.rgb *= gl_FragColor.a;\n    // gl_FragColor.a = 1.0;\n    // gl_FragColor.a *= vUv.y;\n  } \n\n  // else {\n    // vec3 fogColor = texture2D(groundMap, vGroundUv).rgb;\n    // vec3 fogColor = vGroundColor;\n    // gl_FragColor.rgb *= color;\n    // gl_FragColor.rgb = mix(gl_FragColor.rgb, fogColor, 0.2);\n    // gl_FragColor.rgb = gl_FragColor.rgb + fogColor * 0.1;\n    // gl_FragColor.rgb = mix(gl_FragColor.rgb, gl_FragColor.rgb + fogColor, 0.2);\n\n    // float vFog0 = 1.0 - pow(clamp(vWorldPosition.y / 0.5, 0.0, 1.0), 0.25);\n    // float yoff = sin(time + fract(vCenterWorldPos.x * 100.0 + vCenterWorldPos.z * 100.0));\n    // float ypos = max(0.0, vWorldPosition.y + yoff * 0.0);\n    // float vFog1 = 1.0 - pow(clamp(ypos / 4.0, 0.0, 1.0), 0.5);\n    // gl_FragColor.rgb = mix(gl_FragColor.rgb, fogColor, vFog0);\n    // float vStr = 0.33;\n    // gl_FragColor.rgb = mix(gl_FragColor.rgb, fogColor + 0.1, vFog1 * vStr);\n  // }\n\n  // TODO: Screen door\n  // Will have to be done with another render target perhaps? render character\n  // and other key features (tokens) to it as black/white mask, then texture fetch\n  // the mask in this shader to see if we need to do transparency or not\n  // screenDoor(0.65);\n\n}\n";