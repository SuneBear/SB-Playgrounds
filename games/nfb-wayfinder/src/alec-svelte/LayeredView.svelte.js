/* alec-svelte/LayeredView.svelte generated by Svelte v3.31.0 */
import {
	SvelteComponent,
	check_outros,
	create_component,
	destroy_component,
	detach,
	empty,
	group_outros,
	init,
	insert,
	mount_component,
	outro_and_destroy_block,
	safe_not_equal,
	transition_in,
	transition_out,
	update_keyed_each
} from "svelte/internal";

import LayeredViewComponent from "./LayeredViewComponent.svelte";
import { ViewLayer } from "./";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (23:0) {#each layers as layer (layer.get(ViewLayer).id)}
function create_each_block(key_1, ctx) {
	let first;
	let layeredviewcomponent;
	let current;

	layeredviewcomponent = new LayeredViewComponent({
			props: {
				props: /*layer*/ ctx[1].get(ViewLayer).props,
				component: /*layer*/ ctx[1].get(ViewLayer).component,
				entity: /*layer*/ ctx[1]
			}
		});

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			create_component(layeredviewcomponent.$$.fragment);
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			mount_component(layeredviewcomponent, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const layeredviewcomponent_changes = {};
			if (dirty & /*layers*/ 1) layeredviewcomponent_changes.props = /*layer*/ ctx[1].get(ViewLayer).props;
			if (dirty & /*layers*/ 1) layeredviewcomponent_changes.component = /*layer*/ ctx[1].get(ViewLayer).component;
			if (dirty & /*layers*/ 1) layeredviewcomponent_changes.entity = /*layer*/ ctx[1];
			layeredviewcomponent.$set(layeredviewcomponent_changes);
		},
		i(local) {
			if (current) return;
			transition_in(layeredviewcomponent.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(layeredviewcomponent.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			destroy_component(layeredviewcomponent, detaching);
		}
	};
}

function create_fragment(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;
	let each_value = /*layers*/ ctx[0];
	const get_key = ctx => /*layer*/ ctx[1].get(ViewLayer).id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*layers, ViewLayer*/ 1) {
				const each_value = /*layers*/ ctx[0];
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block, each_1_anchor, get_each_context);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { layers = [] } = $$props;

	$$self.$$set = $$props => {
		if ("layers" in $$props) $$invalidate(0, layers = $$props.layers);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*layers*/ 1) {
			$: {
				const set = new Set();

				layers.forEach(e => {
					const id = e.get(ViewLayer).id;
					if (!id) throw new Error(`Must specify an ID for ViewLayer ${e.name} ${e.get(ViewLayer).component.name}`);
					if (set.has(id)) throw new Error(`You already added the view layer with ID ${id}`);
					set.add(id);
				});
			}
		}
	};

	return [layers];
}

class LayeredView extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { layers: 0 });
	}
}

export default LayeredView;
