/* overlays/GameUIIntro.svelte generated by Svelte v3.31.0 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	create_in_transition,
	create_out_transition,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "svelte/internal";

import { createEventDispatcher } from "svelte";

import {
	fadeInTransition,
	fadeOutTransition,
	fadeTransition,
	transition
} from "../animations/transitions";

import { localize } from "../util/locale";
import Image from "../components/Image.svelte";
import { onMount } from "svelte";
import LeafVideo from "../components/LeafVideo.svelte";

function create_if_block_1(ctx) {
	let leafvideo;
	let current;

	leafvideo = new LeafVideo({
			props: {
				fadeInOptions: { delay: 0, duration: 2000 },
				fadeOutOptions: { delay: 2000, duration: 500 }
			}
		});

	return {
		c() {
			create_component(leafvideo.$$.fragment);
		},
		m(target, anchor) {
			mount_component(leafvideo, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(leafvideo.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(leafvideo.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(leafvideo, detaching);
		}
	};
}

// (37:2) {#if showLogo}
function create_if_block(ctx) {
	let image;
	let t0;
	let div;
	let t1_value = /*$localize*/ ctx[2].introPresents + "";
	let t1;
	let div_intro;
	let div_outro;
	let current;
	let mounted;
	let dispose;

	image = new Image({
			props: {
				inTransition: transition(fadeInTransition, { duration: 1500 }),
				outTransition: transition(fadeOutTransition, { delay: 2000 }),
				width: "150px",
				id: "image/svg/nfblogo"
			}
		});

	image.$on("introend", /*introend_handler*/ ctx[4]);
	image.$on("outroend", /*outroend_handler*/ ctx[5]);
	image.$on("outrostart", /*outrostart_handler*/ ctx[6]);

	return {
		c() {
			create_component(image.$$.fragment);
			t0 = space();
			div = element("div");
			t1 = text(t1_value);
			attr(div, "class", "presented svelte-1th3gw3");
		},
		m(target, anchor) {
			mount_component(image, target, anchor);
			insert(target, t0, anchor);
			insert(target, div, anchor);
			append(div, t1);
			current = true;

			if (!mounted) {
				dispose = listen(div, "introend", /*introend_handler_1*/ ctx[7]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*$localize*/ 4) && t1_value !== (t1_value = /*$localize*/ ctx[2].introPresents + "")) set_data(t1, t1_value);
		},
		i(local) {
			if (current) return;
			transition_in(image.$$.fragment, local);

			add_render_callback(() => {
				if (div_outro) div_outro.end(1);
				if (!div_intro) div_intro = create_in_transition(div, fadeInTransition, { delay: 500, duration: 1250 });
				div_intro.start();
			});

			current = true;
		},
		o(local) {
			transition_out(image.$$.fragment, local);
			if (div_intro) div_intro.invalidate();
			div_outro = create_out_transition(div, fadeOutTransition, { delay: 1750 });
			current = false;
		},
		d(detaching) {
			destroy_component(image, detaching);
			if (detaching) detach(t0);
			if (detaching) detach(div);
			if (detaching && div_outro) div_outro.end();
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let main;
	let t;
	let current;
	let if_block0 = /*showVideo*/ ctx[1] && create_if_block_1(ctx);
	let if_block1 = /*showLogo*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			main = element("main");
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			attr(main, "class", "svelte-1th3gw3");
		},
		m(target, anchor) {
			insert(target, main, anchor);
			if (if_block0) if_block0.m(main, null);
			append(main, t);
			if (if_block1) if_block1.m(main, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*showVideo*/ ctx[1]) {
				if (if_block0) {
					if (dirty & /*showVideo*/ 2) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(main, t);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*showLogo*/ ctx[0]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*showLogo*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(main, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(main);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $localize;
	component_subscribe($$self, localize, $$value => $$invalidate(2, $localize = $$value));
	const dispatcher = createEventDispatcher();
	let showLogo = true;
	let showVideo = true;

	onMount(() => {
		return () => {
			
		};
	});

	const introend_handler = () => {
		$$invalidate(0, showLogo = false);
	};

	const outroend_handler = () => {
		dispatcher("end");
	};

	const outrostart_handler = () => {
		$$invalidate(1, showVideo = false);
	};

	const introend_handler_1 = () => {
		dispatcher("inbetween");
	};

	return [
		showLogo,
		showVideo,
		$localize,
		dispatcher,
		introend_handler,
		outroend_handler,
		outrostart_handler,
		introend_handler_1
	];
}

class GameUIIntro extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default GameUIIntro;