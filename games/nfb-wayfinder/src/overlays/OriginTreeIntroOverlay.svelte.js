/* overlays/OriginTreeIntroOverlay.svelte generated by Svelte v3.31.0 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	binding_callbacks,
	check_outros,
	component_subscribe,
	create_component,
	create_in_transition,
	create_out_transition,
	destroy_component,
	detach,
	element,
	globals,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "svelte/internal";

const { window: window_1 } = globals;
import { onMount } from "svelte";
import { writable, get } from "svelte/store";
import { sendAnalytics } from "../nfb";

import {
	fadeTransition,
	fadeInTransition,
	fadeOpacityTransition,
	emptyTransition,
	transition,
	fadeOutTransition
} from "../animations/transitions";

import AnimatedTextSpan from "../components/AnimatedTextSpan.svelte";
import { localize } from "../util/locale";
import ImageButton from "../components/ImageButton.svelte";

import {
	unmountVideo,
	pauseVideo,
	getVideo,
	hasVideo,
	getMetadata
} from "../util/globalIntroVideo";

import objectFit from "../util/objectFit";

function create_if_block_3(ctx) {
	let div;
	let t_value = /*$localize*/ ctx[5][/*texts*/ ctx[1][0].key] + "";
	let t;
	let div_intro;
	let div_outro;
	let current;

	return {
		c() {
			div = element("div");
			t = text(t_value);
			attr(div, "class", "text-container svelte-qit7e6");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*$localize, texts*/ 34) && t_value !== (t_value = /*$localize*/ ctx[5][/*texts*/ ctx[1][0].key] + "")) set_data(t, t_value);
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (div_outro) div_outro.end(1);
				if (!div_intro) div_intro = create_in_transition(div, fadeInTransition, { duration: 1000, delay: 0 });
				div_intro.start();
			});

			current = true;
		},
		o(local) {
			if (div_intro) div_intro.invalidate();
			div_outro = create_out_transition(div, fadeInTransition, { duration: 1000, delay: 0 });
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching && div_outro) div_outro.end();
		}
	};
}

// (201:2) {#if texts[1].visible}
function create_if_block_2(ctx) {
	let div;
	let t_value = /*$localize*/ ctx[5][/*texts*/ ctx[1][1].key] + "";
	let t;
	let div_intro;
	let div_outro;
	let current;

	return {
		c() {
			div = element("div");
			t = text(t_value);
			attr(div, "class", "text-container svelte-qit7e6");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*$localize, texts*/ 34) && t_value !== (t_value = /*$localize*/ ctx[5][/*texts*/ ctx[1][1].key] + "")) set_data(t, t_value);
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (div_outro) div_outro.end(1);
				if (!div_intro) div_intro = create_in_transition(div, fadeInTransition, { duration: 1000, delay: 0 });
				div_intro.start();
			});

			current = true;
		},
		o(local) {
			if (div_intro) div_intro.invalidate();
			div_outro = create_out_transition(div, fadeInTransition, { duration: 1000, delay: 0 });
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching && div_outro) div_outro.end();
		}
	};
}

// (217:2) {#if texts[2].visible}
function create_if_block_1(ctx) {
	let div;
	let t_value = /*$localize*/ ctx[5][/*texts*/ ctx[1][2].key] + "";
	let t;
	let div_intro;
	let div_outro;
	let current;

	return {
		c() {
			div = element("div");
			t = text(t_value);
			attr(div, "class", "text-container svelte-qit7e6");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*$localize, texts*/ 34) && t_value !== (t_value = /*$localize*/ ctx[5][/*texts*/ ctx[1][2].key] + "")) set_data(t, t_value);
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (div_outro) div_outro.end(1);
				if (!div_intro) div_intro = create_in_transition(div, fadeInTransition, { duration: 1000, delay: 0 });
				div_intro.start();
			});

			current = true;
		},
		o(local) {
			if (div_intro) div_intro.invalidate();
			div_outro = create_out_transition(div, fadeInTransition, { duration: 1000, delay: 0 });
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching && div_outro) div_outro.end();
		}
	};
}

// (250:2) {#if isWhite}
function create_if_block(ctx) {
	let div;
	let div_intro;

	return {
		c() {
			div = element("div");
			attr(div, "class", "white-overlay svelte-qit7e6");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		i(local) {
			if (!div_intro) {
				add_render_callback(() => {
					div_intro = create_in_transition(div, fadeInTransition, {
						opacity: 0,
						delay: 0,
						duration: 500,
						y: 0
					});

					div_intro.start();
				});
			}
		},
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment(ctx) {
	let div3;
	let div0;
	let div0_intro;
	let t0;
	let div1;
	let div1_intro;
	let t1;
	let t2;
	let t3;
	let t4;
	let div2;
	let imagebutton;
	let t5;
	let div3_outro;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*texts*/ ctx[1][0].visible && create_if_block_3(ctx);
	let if_block1 = /*texts*/ ctx[1][1].visible && create_if_block_2(ctx);
	let if_block2 = /*texts*/ ctx[1][2].visible && create_if_block_1(ctx);

	imagebutton = new ImageButton({
			props: {
				inTransition: transition(fadeInTransition, { delay: 2500 }),
				mode: "normal_small",
				text: /*$localize*/ ctx[5].skipButton
			}
		});

	imagebutton.$on("click", /*click_handler*/ ctx[13]);
	let if_block3 = /*isWhite*/ ctx[2] && create_if_block(ctx);

	return {
		c() {
			div3 = element("div");
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			t1 = space();
			if (if_block0) if_block0.c();
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			if (if_block2) if_block2.c();
			t4 = space();
			div2 = element("div");
			create_component(imagebutton.$$.fragment);
			t5 = space();
			if (if_block3) if_block3.c();
			attr(div0, "class", "black-overlay svelte-qit7e6");
			attr(div1, "class", "intro-video-container svelte-qit7e6");
			attr(div2, "class", "button-container svelte-qit7e6");
			attr(div3, "class", "intro svelte-qit7e6");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div0);
			/*div0_binding*/ ctx[10](div0);
			append(div3, t0);
			append(div3, div1);
			/*div1_binding*/ ctx[12](div1);
			append(div3, t1);
			if (if_block0) if_block0.m(div3, null);
			append(div3, t2);
			if (if_block1) if_block1.m(div3, null);
			append(div3, t3);
			if (if_block2) if_block2.m(div3, null);
			append(div3, t4);
			append(div3, div2);
			mount_component(imagebutton, div2, null);
			append(div3, t5);
			if (if_block3) if_block3.m(div3, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window_1, "resize", /*onScreenResize*/ ctx[6], { passive: true }),
					listen(div0, "introend", /*introend_handler*/ ctx[11]),
					listen(div3, "outrostart", /*outrostart_handler*/ ctx[14]),
					listen(div3, "outroend", /*outroend_handler*/ ctx[15])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*texts*/ ctx[1][0].visible) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*texts*/ 2) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div3, t2);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*texts*/ ctx[1][1].visible) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*texts*/ 2) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_2(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div3, t3);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*texts*/ ctx[1][2].visible) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*texts*/ 2) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_1(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div3, t4);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			const imagebutton_changes = {};
			if (dirty & /*$localize*/ 32) imagebutton_changes.text = /*$localize*/ ctx[5].skipButton;
			imagebutton.$set(imagebutton_changes);

			if (/*isWhite*/ ctx[2]) {
				if (if_block3) {
					if (dirty & /*isWhite*/ 4) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(div3, null);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}
		},
		i(local) {
			if (current) return;

			if (!div0_intro) {
				add_render_callback(() => {
					div0_intro = create_in_transition(div0, fadeInTransition, { delay: 0, duration: 1000, y: 0 });
					div0_intro.start();
				});
			}

			if (!div1_intro) {
				add_render_callback(() => {
					div1_intro = create_in_transition(div1, fadeOpacityTransition, { delay: 1000, duration: 500 });
					div1_intro.start();
				});
			}

			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			transition_in(imagebutton.$$.fragment, local);
			transition_in(if_block3);
			if (div3_outro) div3_outro.end(1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			transition_out(imagebutton.$$.fragment, local);
			div3_outro = create_out_transition(div3, fadeOpacityTransition, { delay: 1250, duration: 1500 });
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			/*div0_binding*/ ctx[10](null);
			/*div1_binding*/ ctx[12](null);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			destroy_component(imagebutton);
			if (if_block3) if_block3.d();
			if (detaching && div3_outro) div3_outro.end();
			mounted = false;
			run_all(dispose);
		}
	};
}

let showRotate = false;

// setTimeout(() => {
//   texts[0].visible = false;
//   texts[1].visible = true;
// }, delay + texts[0].delay + texts[0].duration);
let time = 0;

function kill(e) {
	console.log("kill", e);
}

function instance($$self, $$props, $$invalidate) {
	let $localize;
	component_subscribe($$self, localize, $$value => $$invalidate(5, $localize = $$value));
	let { store } = $$props;
	let { delay = 0 } = $$props;
	let { duration = 33 } = $$props;
	const isMobile = (/(Android|iOS|iPad|iPod|iPhone)/i).test(navigator.userAgent);

	let texts = [
		{
			visible: false,
			key: "introVideoLine0",
			timestamp: 2000,
			delay: 0,
			duration: 4250
		},
		{
			visible: false,
			key: "introVideoLine1",
			timestamp: 14000,
			duration: 4500,
			delay: 0
		},
		{
			visible: false,
			key: "introVideoLine2",
			timestamp: 23000,
			duration: 5000,
			delay: 0
		}
	];

	let isWhite = false;
	let videoContainer;
	let visible;
	let timer;
	let overlay;

	let unsub = store.subscribe(v => {
		visible = v.visible;
	});

	let textTimeout;
	let textYPosition;

	texts.forEach((t, i) => {
		setTimeout(
			() => {
				// t.visible = true;
				$$invalidate(1, texts[i].visible = true, texts);

				$$invalidate(1, texts);

				setTimeout(
					() => {
						$$invalidate(1, texts[i].visible = false, texts);
						$$invalidate(1, texts);
					},
					t.duration
				);
			},
			t.timestamp
		);
	});

	onMount(() => {
		if (videoContainer) {
			const video = getVideo();
			videoContainer.appendChild(video);
			video.style.visibility = "";

			getMetadata().then(() => {
				resizeVideo();
			});
		}

		// store.update((d) => ({ ...d, visible: true }));
		// if (video) video.play();
		timer = setTimeout(
			() => {
				sendAnalytics({
					event: "intro_finish",
					eventLabel: "finish"
				});

				stop();
			},
			duration * 1000
		);

		return () => {
			unsub();
			unmountVideo();

			// if (video) video.pause();
			clearTimeout(textTimeout);

			clearTimeout(timer);
		};
	});

	function resizeVideo() {
		const aspect = window.innerWidth / window.innerHeight;
		const video = hasVideo() ? getVideo() : null;

		if (video) {
			const [tx, ty, sw, sh] = objectFit({
				parentWidth: window.innerWidth,
				parentHeight: window.innerHeight,
				childWidth: video.videoWidth,
				childHeight: video.videoHeight,
				fit: "cover"
			});

			Object.assign(video.style, {
				left: `${tx}px`,
				top: `${ty}px`,
				width: `${sw}px`,
				height: `${sh}px`
			});

			const fontHeight = 32;
		} // textYPosition = window.innerHeight * 0.895;
	}

	function onScreenResize() {
		if (!hasVideo()) return;
		const video = getVideo();

		if (video.readyState <= 0) {
			getMetadata().then(() => resizeVideo());
		} else {
			resizeVideo();
		}
	}

	function stop() {
		$$invalidate(2, isWhite = true);
		pauseVideo();
		clearTimeout(timer);
		store.update(d => ({ ...d, visible: false }));
	}

	function div0_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			overlay = $$value;
			$$invalidate(4, overlay);
		});
	}

	const introend_handler = () => store.update(d => ({ ...d, covering: true }));

	function div1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			videoContainer = $$value;
			$$invalidate(3, videoContainer);
		});
	}

	const click_handler = () => {
		sendAnalytics({ event: "intro_skip", eventLabel: "skip" });
		stop();
	};

	const outrostart_handler = () => store.update(d => ({ ...d, covering: false }));
	const outroend_handler = () => store.update(d => ({ ...d, finished: true }));

	$$self.$$set = $$props => {
		if ("store" in $$props) $$invalidate(0, store = $$props.store);
		if ("delay" in $$props) $$invalidate(8, delay = $$props.delay);
		if ("duration" in $$props) $$invalidate(9, duration = $$props.duration);
	};

	return [
		store,
		texts,
		isWhite,
		videoContainer,
		overlay,
		$localize,
		onScreenResize,
		stop,
		delay,
		duration,
		div0_binding,
		introend_handler,
		div1_binding,
		click_handler,
		outrostart_handler,
		outroend_handler
	];
}

class OriginTreeIntroOverlay extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { store: 0, delay: 8, duration: 9 });
	}
}

export default OriginTreeIntroOverlay;